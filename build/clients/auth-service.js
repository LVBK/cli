'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnauthorizedError = exports.AuthServiceError = undefined;
exports.createRefreshToken = createRefreshToken;
exports.createAppAccessToken = createAppAccessToken;
exports.getRefreshToken = getRefreshToken;
exports.clearTokens = clearTokens;
exports.authorizeRequests = authorizeRequests;

var _urijs = require('urijs');

var _urijs2 = _interopRequireDefault(_urijs);

var _jsonApiClient = require('./json-api-client');

var _services = require('../../config/services');

var _services2 = _interopRequireDefault(_services);

var _cacheEnv = require('../services/cache-env');

var cache = _interopRequireWildcard(_cacheEnv);

var _logger = require('../services/logger');

var logger = _interopRequireWildcard(_logger);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AuthServiceError {
  /*
    Used whenever AuthService misbehaves and returns errors not listed in the
    API specification.
  */
  constructor(message, url, response, code) {
    this.message = message;
    this.url = url;
    this.response = response;
    this.code = code;
  }
}

exports.AuthServiceError = AuthServiceError;
class UnauthorizedError {
  /*
    Used when bad username or password is supplied.
  */
  constructor(url, response, statusCode) {
    this.message = 'Username or password is not valid';
    this.url = url;
    this.response = response;
    this.statusCode = statusCode;
  }
}

exports.UnauthorizedError = UnauthorizedError;
const tokensUrl = new _urijs2.default(_services2.default.authService).segment('/v1/auth/tokens').toString();
const appAccessTokenUrl = new _urijs2.default(_services2.default.legacyService).segment('/v1/auth/tokens').toString();

function getBasicAuthHeaderValue(email, password) {
  return 'Basic ' + new Buffer(`${email}:${password}`).toString('base64');
}

async function createRefreshToken(email, password) {
  try {
    const response = await (0, _jsonApiClient.post)(tokensUrl, null, {
      headers: {
        Authorization: getBasicAuthHeaderValue(email, password)
      }
    });
    const { token } = response;
    return token;
  } catch (err) {
    if (err.statusCode === 401) {
      throw new UnauthorizedError(err.url, err.response, err.statusCode);
    }
    throw err;
  }
}

async function createAppAccessToken(appId, refreshToken) {
  const body = {
    data: {
      type: 'shoutem.auth.tokens',
      attributes: {
        tokenType: 'access-token',
        subjectType: 'application',
        subjectId: appId.toString()
      }
    }
  };

  const { token } = await (0, _jsonApiClient.post)(appAccessTokenUrl, body, {
    headers: {
      Authorization: `Bearer ${refreshToken}`
    }
  });

  return token;
}

async function getRefreshToken({ email, password } = {}) {
  if (email && password) {
    const refreshToken = await cache.setValue('refresh-token', (await createRefreshToken(email, password)));
    await cache.setValue('access-token', null);
    return refreshToken;
  }

  return await cache.getValue('refresh-token');
}

async function clearTokens() {
  await cache.setValue('access-token', null);
  await cache.setValue('refresh-token', null);
}

const authorizationConfig = {
  createAccessTokenRequest(refreshToken) {
    logger.info('createAccessTokenRequest', refreshToken);
    return new Request(tokensUrl, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${refreshToken}`,
        Accept: 'application/vnd.api+json',
        'Content-Type': 'application/vnd.api+json'
      },
      body: JSON.stringify({
        data: {
          type: 'shoutem.auth.tokens',
          attributes: {
            tokenType: 'access-token',
            compressionType: 'gzip'
          }
        }
      })
    });
  },
  async parseAccessToken(response) {
    if (response.ok) {
      const { data: { attributes: { token } } } = await response.json();
      await cache.setValue('access-token', token);
      return token;
    }
    logger.info('parseAccessToken', response);
    throw new AuthServiceError('Could not get access token', tokensUrl, response, 'ACCESS_TOKEN_FAILURE');
  },
  shouldIntercept(request) {
    return !request.headers.get('Authorization') && new _urijs2.default(request.url).host() !== 'github.com';
  },
  shouldInvalidateAccessToken() {
    return false;
  },
  authorizeRequest(request, accessToken) {
    request.headers.set('Authorization', `Bearer ${accessToken}`);
    logger.info('authorizeRequest', request.headers);
    return request;
  },
  isResponseUnauthorized({ status }) {
    return status === 401 || status === 403;
  },
  shouldWaitForTokenRenewal: true
};

async function authorizeRequests(refreshToken) {
  if (!refreshToken) {
    return;
  }
  try {
    const intercept = require('@shoutem/fetch-token-intercept');
    intercept.configure(authorizationConfig);
    intercept.authorize(refreshToken, (await cache.getValue('access-token')));
    return true;
  } catch (err) {
    logger.info(err);
    if (err.statusCode !== 401) {
      throw err;
    }
    return false;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,