"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.command = exports.description = undefined;
exports.offerInstallationUpdate = offerInstallationUpdate;

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _errorHandler = require("../../services/error-handler");

var _login = require("../../commands/login");

var _platform = require("../../services/platform");

var _fsExtra = require("fs-extra");

var _push = require("../../commands/push");

var _publish = require("../../commands/publish");

var _appManager = require("../../clients/app-manager");

var _confirmer = require("../../services/confirmer");

var _confirmer2 = _interopRequireDefault(_confirmer);

var _extensionManager = require("../../clients/extension-manager");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const description = exports.description = 'Publish an extension from the app in the working directory';
const command = exports.command = 'publish <name>';
const builder = exports.builder = yargs => {
  return yargs.usage(`shoutem ${command}\n\n${description}`);
};

const handler = exports.handler = ({ name }) => (0, _errorHandler.executeAndHandleError)(async () => {
  const dev = await (0, _login.ensureUserIsLoggedIn)();
  const extensionPath = _path2.default.join((await (0, _platform.getPlatformExtensionsDir)()), `${dev.name}.${name}`);

  if (!(await (0, _fsExtra.pathExists)(extensionPath))) {
    throw new Error(`Path ${_path2.default.relative(process.cwd(), extensionPath)} does not exist`);
  }

  await (0, _push.uploadExtension)({ publish: true }, extensionPath);
  const { id: extensionId, version } = await (0, _publish.publishExtension)(extensionPath);
  await offerInstallationUpdate(extensionId, name, version);
  console.log('Success'.green.bold);
});

async function offerInstallationUpdate(extensionId, extensionName, newVersion) {
  const { appId } = await (0, _platform.getPlatformConfig)();
  const dev = await (0, _login.ensureUserIsLoggedIn)();
  const canonical = `${dev.name}.${extensionName}`;

  try {
    const { id: installationId, extension: oldExtensionId } = await (0, _appManager.getInstallation)(appId, canonical);
    const { version: oldVersion } = await (0, _extensionManager.getExtension)(oldExtensionId);
    const versionMsg = `${canonical}@${oldVersion} => @${newVersion}`;
    const msg = `Update the version used in the current app (${versionMsg})?`;
    if (await (0, _confirmer2.default)(msg)) {
      await (0, _appManager.updateExtension)(appId, installationId, extensionId);
    }
  } catch (e) {
    if (e.statusCode !== 404) {
      throw e;
    }
    if (await (0, _confirmer2.default)(`Do you want to install ${canonical} extension to the app ${appId}?`)) {
      await (0, _appManager.installExtension)(appId, extensionId);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvZXh0ZW5zaW9uL3B1Ymxpc2guanMiXSwibmFtZXMiOlsib2ZmZXJJbnN0YWxsYXRpb25VcGRhdGUiLCJkZXNjcmlwdGlvbiIsImNvbW1hbmQiLCJidWlsZGVyIiwieWFyZ3MiLCJ1c2FnZSIsImhhbmRsZXIiLCJuYW1lIiwiZGV2IiwiZXh0ZW5zaW9uUGF0aCIsInBhdGgiLCJqb2luIiwiRXJyb3IiLCJyZWxhdGl2ZSIsInByb2Nlc3MiLCJjd2QiLCJwdWJsaXNoIiwiaWQiLCJleHRlbnNpb25JZCIsInZlcnNpb24iLCJjb25zb2xlIiwibG9nIiwiZ3JlZW4iLCJib2xkIiwiZXh0ZW5zaW9uTmFtZSIsIm5ld1ZlcnNpb24iLCJhcHBJZCIsImNhbm9uaWNhbCIsImluc3RhbGxhdGlvbklkIiwiZXh0ZW5zaW9uIiwib2xkRXh0ZW5zaW9uSWQiLCJvbGRWZXJzaW9uIiwidmVyc2lvbk1zZyIsIm1zZyIsImUiLCJzdGF0dXNDb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFnQ3NCQSx1QixHQUFBQSx1Qjs7QUFoQ3RCOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUVPLE1BQU1DLG9DQUFjLDREQUFwQjtBQUNBLE1BQU1DLDRCQUFVLGdCQUFoQjtBQUNBLE1BQU1DLDRCQUFVQyxTQUFTO0FBQzlCLFNBQU9BLE1BQ0pDLEtBREksQ0FDRyxXQUFVSCxPQUFRLE9BQU1ELFdBQVksRUFEdkMsQ0FBUDtBQUVELENBSE07O0FBS0EsTUFBTUssNEJBQVUsQ0FBQyxFQUFFQyxJQUFGLEVBQUQsS0FBYyx5Q0FBc0IsWUFBWTtBQUNyRSxRQUFNQyxNQUFNLE1BQU0sa0NBQWxCO0FBQ0EsUUFBTUMsZ0JBQWdCQyxlQUFLQyxJQUFMLEVBQVUsTUFBTSx5Q0FBaEIsR0FBNkMsR0FBRUgsSUFBSUQsSUFBSyxJQUFHQSxJQUFLLEVBQWhFLENBQXRCOztBQUVBLE1BQUksRUFBQyxNQUFNLHlCQUFXRSxhQUFYLENBQVAsQ0FBSixFQUFzQztBQUNwQyxVQUFNLElBQUlHLEtBQUosQ0FBVyxRQUFPRixlQUFLRyxRQUFMLENBQWNDLFFBQVFDLEdBQVIsRUFBZCxFQUE2Qk4sYUFBN0IsQ0FBNEMsaUJBQTlELENBQU47QUFDRDs7QUFFRCxRQUFNLDJCQUFnQixFQUFFTyxTQUFTLElBQVgsRUFBaEIsRUFBbUNQLGFBQW5DLENBQU47QUFDQSxRQUFNLEVBQUVRLElBQUlDLFdBQU4sRUFBbUJDLE9BQW5CLEtBQStCLE1BQU0sK0JBQWlCVixhQUFqQixDQUEzQztBQUNBLFFBQU1ULHdCQUF3QmtCLFdBQXhCLEVBQXFDWCxJQUFyQyxFQUEyQ1ksT0FBM0MsQ0FBTjtBQUNBQyxVQUFRQyxHQUFSLENBQVksVUFBVUMsS0FBVixDQUFnQkMsSUFBNUI7QUFDRCxDQVpvQyxDQUE5Qjs7QUFjQSxlQUFldkIsdUJBQWYsQ0FBdUNrQixXQUF2QyxFQUFvRE0sYUFBcEQsRUFBbUVDLFVBQW5FLEVBQStFO0FBQ3BGLFFBQU0sRUFBRUMsS0FBRixLQUFZLE1BQU0sa0NBQXhCO0FBQ0EsUUFBTWxCLE1BQU0sTUFBTSxrQ0FBbEI7QUFDQSxRQUFNbUIsWUFBYSxHQUFFbkIsSUFBSUQsSUFBSyxJQUFHaUIsYUFBYyxFQUEvQzs7QUFFQSxNQUFJO0FBQ0YsVUFBTSxFQUFFUCxJQUFJVyxjQUFOLEVBQXNCQyxXQUFXQyxjQUFqQyxLQUFvRCxNQUFNLGlDQUFnQkosS0FBaEIsRUFBdUJDLFNBQXZCLENBQWhFO0FBQ0EsVUFBTSxFQUFFUixTQUFTWSxVQUFYLEtBQTBCLE1BQU0sb0NBQWFELGNBQWIsQ0FBdEM7QUFDQSxVQUFNRSxhQUFjLEdBQUVMLFNBQVUsSUFBR0ksVUFBVyxRQUFPTixVQUFXLEVBQWhFO0FBQ0EsVUFBTVEsTUFBTywrQ0FBOENELFVBQVcsSUFBdEU7QUFDQSxRQUFJLE1BQU0seUJBQVVDLEdBQVYsQ0FBVixFQUEwQjtBQUN4QixZQUFNLGlDQUFnQlAsS0FBaEIsRUFBdUJFLGNBQXZCLEVBQXVDVixXQUF2QyxDQUFOO0FBQ0Q7QUFDRixHQVJELENBUUUsT0FBT2dCLENBQVAsRUFBVTtBQUNWLFFBQUlBLEVBQUVDLFVBQUYsS0FBaUIsR0FBckIsRUFBMEI7QUFDeEIsWUFBTUQsQ0FBTjtBQUNEO0FBQ0QsUUFBSSxNQUFNLHlCQUFXLDBCQUF5QlAsU0FBVSx5QkFBd0JELEtBQU0sR0FBNUUsQ0FBVixFQUEyRjtBQUN6RixZQUFNLGtDQUFpQkEsS0FBakIsRUFBd0JSLFdBQXhCLENBQU47QUFDRDtBQUNGO0FBQ0YiLCJmaWxlIjoicHVibGlzaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQge2V4ZWN1dGVBbmRIYW5kbGVFcnJvcn0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2Vycm9yLWhhbmRsZXJcIjtcclxuaW1wb3J0IHtlbnN1cmVVc2VySXNMb2dnZWRJbn0gZnJvbSBcIi4uLy4uL2NvbW1hbmRzL2xvZ2luXCI7XHJcbmltcG9ydCB7Z2V0UGxhdGZvcm1Db25maWcsIGdldFBsYXRmb3JtRXh0ZW5zaW9uc0Rpcn0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3BsYXRmb3JtXCI7XHJcbmltcG9ydCB7IHBhdGhFeGlzdHMgfSBmcm9tICdmcy1leHRyYSc7XHJcbmltcG9ydCB7dXBsb2FkRXh0ZW5zaW9ufSBmcm9tIFwiLi4vLi4vY29tbWFuZHMvcHVzaFwiO1xyXG5pbXBvcnQge3B1Ymxpc2hFeHRlbnNpb259IGZyb20gXCIuLi8uLi9jb21tYW5kcy9wdWJsaXNoXCI7XHJcbmltcG9ydCB7dXBkYXRlRXh0ZW5zaW9uLCBnZXRJbnN0YWxsYXRpb24sIGluc3RhbGxFeHRlbnNpb259IGZyb20gXCIuLi8uLi9jbGllbnRzL2FwcC1tYW5hZ2VyXCI7XHJcbmltcG9ydCBjb25maXJtZXIgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2NvbmZpcm1lclwiO1xyXG5pbXBvcnQge2dldEV4dGVuc2lvbn0gZnJvbSBcIi4uLy4uL2NsaWVudHMvZXh0ZW5zaW9uLW1hbmFnZXJcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZXNjcmlwdGlvbiA9ICdQdWJsaXNoIGFuIGV4dGVuc2lvbiBmcm9tIHRoZSBhcHAgaW4gdGhlIHdvcmtpbmcgZGlyZWN0b3J5JztcclxuZXhwb3J0IGNvbnN0IGNvbW1hbmQgPSAncHVibGlzaCA8bmFtZT4nO1xyXG5leHBvcnQgY29uc3QgYnVpbGRlciA9IHlhcmdzID0+IHtcclxuICByZXR1cm4geWFyZ3NcclxuICAgIC51c2FnZShgc2hvdXRlbSAke2NvbW1hbmR9XFxuXFxuJHtkZXNjcmlwdGlvbn1gKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gKHsgbmFtZSB9KSA9PiBleGVjdXRlQW5kSGFuZGxlRXJyb3IoYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGRldiA9IGF3YWl0IGVuc3VyZVVzZXJJc0xvZ2dlZEluKCk7XHJcbiAgY29uc3QgZXh0ZW5zaW9uUGF0aCA9IHBhdGguam9pbihhd2FpdCBnZXRQbGF0Zm9ybUV4dGVuc2lvbnNEaXIoKSwgYCR7ZGV2Lm5hbWV9LiR7bmFtZX1gKTtcclxuXHJcbiAgaWYgKCFhd2FpdCBwYXRoRXhpc3RzKGV4dGVuc2lvblBhdGgpKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdGggJHtwYXRoLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIGV4dGVuc2lvblBhdGgpfSBkb2VzIG5vdCBleGlzdGApO1xyXG4gIH1cclxuXHJcbiAgYXdhaXQgdXBsb2FkRXh0ZW5zaW9uKHsgcHVibGlzaDogdHJ1ZSB9LCBleHRlbnNpb25QYXRoKTtcclxuICBjb25zdCB7IGlkOiBleHRlbnNpb25JZCwgdmVyc2lvbiB9ID0gYXdhaXQgcHVibGlzaEV4dGVuc2lvbihleHRlbnNpb25QYXRoKTtcclxuICBhd2FpdCBvZmZlckluc3RhbGxhdGlvblVwZGF0ZShleHRlbnNpb25JZCwgbmFtZSwgdmVyc2lvbik7XHJcbiAgY29uc29sZS5sb2coJ1N1Y2Nlc3MnLmdyZWVuLmJvbGQpO1xyXG59KTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvZmZlckluc3RhbGxhdGlvblVwZGF0ZShleHRlbnNpb25JZCwgZXh0ZW5zaW9uTmFtZSwgbmV3VmVyc2lvbikge1xyXG4gIGNvbnN0IHsgYXBwSWQgfSA9IGF3YWl0IGdldFBsYXRmb3JtQ29uZmlnKCk7XHJcbiAgY29uc3QgZGV2ID0gYXdhaXQgZW5zdXJlVXNlcklzTG9nZ2VkSW4oKTtcclxuICBjb25zdCBjYW5vbmljYWwgPSBgJHtkZXYubmFtZX0uJHtleHRlbnNpb25OYW1lfWA7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGlkOiBpbnN0YWxsYXRpb25JZCwgZXh0ZW5zaW9uOiBvbGRFeHRlbnNpb25JZCB9ID0gYXdhaXQgZ2V0SW5zdGFsbGF0aW9uKGFwcElkLCBjYW5vbmljYWwpO1xyXG4gICAgY29uc3QgeyB2ZXJzaW9uOiBvbGRWZXJzaW9uIH0gPSBhd2FpdCBnZXRFeHRlbnNpb24ob2xkRXh0ZW5zaW9uSWQpO1xyXG4gICAgY29uc3QgdmVyc2lvbk1zZyA9IGAke2Nhbm9uaWNhbH1AJHtvbGRWZXJzaW9ufSA9PiBAJHtuZXdWZXJzaW9ufWA7XHJcbiAgICBjb25zdCBtc2cgPSBgVXBkYXRlIHRoZSB2ZXJzaW9uIHVzZWQgaW4gdGhlIGN1cnJlbnQgYXBwICgke3ZlcnNpb25Nc2d9KT9gO1xyXG4gICAgaWYgKGF3YWl0IGNvbmZpcm1lcihtc2cpKSB7XHJcbiAgICAgIGF3YWl0IHVwZGF0ZUV4dGVuc2lvbihhcHBJZCwgaW5zdGFsbGF0aW9uSWQsIGV4dGVuc2lvbklkKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBpZiAoZS5zdGF0dXNDb2RlICE9PSA0MDQpIHtcclxuICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICAgIGlmIChhd2FpdCBjb25maXJtZXIoYERvIHlvdSB3YW50IHRvIGluc3RhbGwgJHtjYW5vbmljYWx9IGV4dGVuc2lvbiB0byB0aGUgYXBwICR7YXBwSWR9P2ApKSB7XHJcbiAgICAgIGF3YWl0IGluc3RhbGxFeHRlbnNpb24oYXBwSWQsIGV4dGVuc2lvbklkKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19