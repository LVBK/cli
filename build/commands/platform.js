'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadPlatformArchive = uploadPlatformArchive;
exports.getAvailablePlatforms = getAvailablePlatforms;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _user_messages = require('../user_messages');

var _user_messages2 = _interopRequireDefault(_user_messages);

var _serverEnv = require('../clients/server-env');

var _spinner = require('../services/spinner');

var _progressBar = require('../services/progress-bar');

var _validation = require('../services/validation');

var _extensionManager = require('../clients/extension-manager');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function uploadPlatformArchive(platformArchiveProvider) {
  if (platformArchiveProvider.getType() === 'local') {
    await platformArchiveProvider.validateShoutemIgnore();
  }

  const archivePath = await (0, _spinner.spinify)(platformArchiveProvider.getArchivePath(), 'Packing the platform');
  if (!_fsExtra2.default.pathExists(archivePath)) {
    throw new Error('Unable to create or download archive');
  }

  await (0, _spinner.spinify)((0, _validation.validatePlatformArchive)(platformArchiveProvider), 'Validating platform archive');

  const { size } = await _fsExtra2.default.stat(archivePath);
  const stream = _fsExtra2.default.createReadStream(archivePath);

  let spinner = null;
  const platformResponse = await (0, _extensionManager.uploadPlatform)(stream, (0, _progressBar.createProgressHandler)({
    msg: 'Upload progress',
    total: size,
    onFinished: () => spinner = (0, _spinner.startSpinner)('Processing upload...')
  }), size);
  if (spinner) {
    spinner.stop(true);
    console.log(`Processing upload... [${'OK'.green.bold}]`);
  }
  console.log(`${_user_messages2.default.platform.uploadingInfo((0, _serverEnv.getHostEnvName)())} [${'OK'.green.bold}]`);

  platformArchiveProvider.cleanUp();

  return platformResponse;
}

async function getAvailablePlatforms(limit) {
  const developer = await (0, _extensionManager.getDeveloper)();
  const allPlatforms = await (0, _extensionManager.getPlatforms)();

  let ownPlatforms = _lodash2.default.filter(allPlatforms, platform => _lodash2.default.get(platform, ['author', 'name']) === developer.name);

  ownPlatforms.sort((p1, p2) => _semver2.default.compare(p1.version, p2.version, true) * -1); // highest versions first

  if (_lodash2.default.isNumber(limit)) {
    ownPlatforms = _lodash2.default.slice(ownPlatforms, 0, limit);
  }

  return ownPlatforms;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9wbGF0Zm9ybS5qcyJdLCJuYW1lcyI6WyJ1cGxvYWRQbGF0Zm9ybUFyY2hpdmUiLCJnZXRBdmFpbGFibGVQbGF0Zm9ybXMiLCJwbGF0Zm9ybUFyY2hpdmVQcm92aWRlciIsImdldFR5cGUiLCJ2YWxpZGF0ZVNob3V0ZW1JZ25vcmUiLCJhcmNoaXZlUGF0aCIsImdldEFyY2hpdmVQYXRoIiwiZnMiLCJwYXRoRXhpc3RzIiwiRXJyb3IiLCJzaXplIiwic3RhdCIsInN0cmVhbSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJzcGlubmVyIiwicGxhdGZvcm1SZXNwb25zZSIsIm1zZyIsInRvdGFsIiwib25GaW5pc2hlZCIsInN0b3AiLCJjb25zb2xlIiwibG9nIiwiZ3JlZW4iLCJib2xkIiwicGxhdGZvcm0iLCJ1cGxvYWRpbmdJbmZvIiwiY2xlYW5VcCIsImxpbWl0IiwiZGV2ZWxvcGVyIiwiYWxsUGxhdGZvcm1zIiwib3duUGxhdGZvcm1zIiwiXyIsImZpbHRlciIsImdldCIsIm5hbWUiLCJzb3J0IiwicDEiLCJwMiIsInNlbXZlciIsImNvbXBhcmUiLCJ2ZXJzaW9uIiwiaXNOdW1iZXIiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFVc0JBLHFCLEdBQUFBLHFCO1FBb0NBQyxxQixHQUFBQSxxQjs7QUE5Q3RCOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFTyxlQUFlRCxxQkFBZixDQUFxQ0UsdUJBQXJDLEVBQThEO0FBQ25FLE1BQUlBLHdCQUF3QkMsT0FBeEIsT0FBc0MsT0FBMUMsRUFBbUQ7QUFDakQsVUFBTUQsd0JBQXdCRSxxQkFBeEIsRUFBTjtBQUNEOztBQUVELFFBQU1DLGNBQWMsTUFBTSxzQkFBUUgsd0JBQXdCSSxjQUF4QixFQUFSLEVBQWtELHNCQUFsRCxDQUExQjtBQUNBLE1BQUksQ0FBQ0Msa0JBQUdDLFVBQUgsQ0FBY0gsV0FBZCxDQUFMLEVBQWlDO0FBQy9CLFVBQU0sSUFBSUksS0FBSixDQUFVLHNDQUFWLENBQU47QUFDRDs7QUFFRCxRQUFNLHNCQUFRLHlDQUF3QlAsdUJBQXhCLENBQVIsRUFBMEQsNkJBQTFELENBQU47O0FBRUEsUUFBTSxFQUFFUSxJQUFGLEtBQVcsTUFBTUgsa0JBQUdJLElBQUgsQ0FBUU4sV0FBUixDQUF2QjtBQUNBLFFBQU1PLFNBQVNMLGtCQUFHTSxnQkFBSCxDQUFvQlIsV0FBcEIsQ0FBZjs7QUFFQSxNQUFJUyxVQUFVLElBQWQ7QUFDQSxRQUFNQyxtQkFBbUIsTUFBTSxzQ0FDN0JILE1BRDZCLEVBRTdCLHdDQUFzQjtBQUNwQkksU0FBSyxpQkFEZTtBQUVwQkMsV0FBT1AsSUFGYTtBQUdwQlEsZ0JBQVksTUFBTUosVUFBVSwyQkFBYSxzQkFBYjtBQUhSLEdBQXRCLENBRjZCLEVBTzdCSixJQVA2QixDQUEvQjtBQVNBLE1BQUlJLE9BQUosRUFBYTtBQUNYQSxZQUFRSyxJQUFSLENBQWEsSUFBYjtBQUNBQyxZQUFRQyxHQUFSLENBQWEseUJBQXdCLEtBQUtDLEtBQUwsQ0FBV0MsSUFBSyxHQUFyRDtBQUNEO0FBQ0RILFVBQVFDLEdBQVIsQ0FBYSxHQUFFTCx3QkFBSVEsUUFBSixDQUFhQyxhQUFiLENBQTJCLGdDQUEzQixDQUE2QyxLQUFJLEtBQUtILEtBQUwsQ0FBV0MsSUFBSyxHQUFoRjs7QUFFQXJCLDBCQUF3QndCLE9BQXhCOztBQUVBLFNBQU9YLGdCQUFQO0FBQ0Q7O0FBRU0sZUFBZWQscUJBQWYsQ0FBcUMwQixLQUFyQyxFQUE0QztBQUNqRCxRQUFNQyxZQUFZLE1BQU0scUNBQXhCO0FBQ0EsUUFBTUMsZUFBZSxNQUFNLHFDQUEzQjs7QUFFQSxNQUFJQyxlQUFlQyxpQkFBRUMsTUFBRixDQUFTSCxZQUFULEVBQXVCTCxZQUFZTyxpQkFBRUUsR0FBRixDQUFNVCxRQUFOLEVBQWdCLENBQUMsUUFBRCxFQUFXLE1BQVgsQ0FBaEIsTUFBd0NJLFVBQVVNLElBQXJGLENBQW5COztBQUVBSixlQUFhSyxJQUFiLENBQWtCLENBQUNDLEVBQUQsRUFBS0MsRUFBTCxLQUFZQyxpQkFBT0MsT0FBUCxDQUFlSCxHQUFHSSxPQUFsQixFQUEyQkgsR0FBR0csT0FBOUIsRUFBdUMsSUFBdkMsSUFBK0MsQ0FBQyxDQUE5RSxFQU5pRCxDQU1pQzs7QUFFbEYsTUFBSVQsaUJBQUVVLFFBQUYsQ0FBV2QsS0FBWCxDQUFKLEVBQXVCO0FBQ3JCRyxtQkFBZUMsaUJBQUVXLEtBQUYsQ0FBUVosWUFBUixFQUFzQixDQUF0QixFQUF5QkgsS0FBekIsQ0FBZjtBQUNEOztBQUVELFNBQU9HLFlBQVA7QUFDRCIsImZpbGUiOiJwbGF0Zm9ybS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcclxuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcclxuaW1wb3J0IG1zZyBmcm9tICcuLi91c2VyX21lc3NhZ2VzJztcclxuaW1wb3J0IHsgZ2V0SG9zdEVudk5hbWUgfSBmcm9tICcuLi9jbGllbnRzL3NlcnZlci1lbnYnO1xyXG5pbXBvcnQgeyBzcGluaWZ5LCBzdGFydFNwaW5uZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9zcGlubmVyJztcclxuaW1wb3J0IHsgY3JlYXRlUHJvZ3Jlc3NIYW5kbGVyIH0gZnJvbSAnLi4vc2VydmljZXMvcHJvZ3Jlc3MtYmFyJztcclxuaW1wb3J0IHsgdmFsaWRhdGVQbGF0Zm9ybUFyY2hpdmUgfSBmcm9tICcuLi9zZXJ2aWNlcy92YWxpZGF0aW9uJztcclxuaW1wb3J0IHsgdXBsb2FkUGxhdGZvcm0sIGdldFBsYXRmb3JtcywgZ2V0RGV2ZWxvcGVyIH0gZnJvbSAnLi4vY2xpZW50cy9leHRlbnNpb24tbWFuYWdlcic7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkUGxhdGZvcm1BcmNoaXZlKHBsYXRmb3JtQXJjaGl2ZVByb3ZpZGVyKSB7XHJcbiAgaWYgKHBsYXRmb3JtQXJjaGl2ZVByb3ZpZGVyLmdldFR5cGUoKSA9PT0gJ2xvY2FsJykge1xyXG4gICAgYXdhaXQgcGxhdGZvcm1BcmNoaXZlUHJvdmlkZXIudmFsaWRhdGVTaG91dGVtSWdub3JlKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBhcmNoaXZlUGF0aCA9IGF3YWl0IHNwaW5pZnkocGxhdGZvcm1BcmNoaXZlUHJvdmlkZXIuZ2V0QXJjaGl2ZVBhdGgoKSwgJ1BhY2tpbmcgdGhlIHBsYXRmb3JtJyk7XHJcbiAgaWYgKCFmcy5wYXRoRXhpc3RzKGFyY2hpdmVQYXRoKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIG9yIGRvd25sb2FkIGFyY2hpdmUnKTtcclxuICB9XHJcblxyXG4gIGF3YWl0IHNwaW5pZnkodmFsaWRhdGVQbGF0Zm9ybUFyY2hpdmUocGxhdGZvcm1BcmNoaXZlUHJvdmlkZXIpLCAnVmFsaWRhdGluZyBwbGF0Zm9ybSBhcmNoaXZlJyk7XHJcblxyXG4gIGNvbnN0IHsgc2l6ZSB9ID0gYXdhaXQgZnMuc3RhdChhcmNoaXZlUGF0aCk7XHJcbiAgY29uc3Qgc3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShhcmNoaXZlUGF0aCk7XHJcblxyXG4gIGxldCBzcGlubmVyID0gbnVsbDtcclxuICBjb25zdCBwbGF0Zm9ybVJlc3BvbnNlID0gYXdhaXQgdXBsb2FkUGxhdGZvcm0oXHJcbiAgICBzdHJlYW0sXHJcbiAgICBjcmVhdGVQcm9ncmVzc0hhbmRsZXIoe1xyXG4gICAgICBtc2c6ICdVcGxvYWQgcHJvZ3Jlc3MnLFxyXG4gICAgICB0b3RhbDogc2l6ZSxcclxuICAgICAgb25GaW5pc2hlZDogKCkgPT4gc3Bpbm5lciA9IHN0YXJ0U3Bpbm5lcignUHJvY2Vzc2luZyB1cGxvYWQuLi4nKSxcclxuICAgIH0pLFxyXG4gICAgc2l6ZSxcclxuICApO1xyXG4gIGlmIChzcGlubmVyKSB7XHJcbiAgICBzcGlubmVyLnN0b3AodHJ1ZSk7XHJcbiAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyB1cGxvYWQuLi4gWyR7J09LJy5ncmVlbi5ib2xkfV1gKTtcclxuICB9XHJcbiAgY29uc29sZS5sb2coYCR7bXNnLnBsYXRmb3JtLnVwbG9hZGluZ0luZm8oZ2V0SG9zdEVudk5hbWUoKSl9IFskeydPSycuZ3JlZW4uYm9sZH1dYCk7XHJcblxyXG4gIHBsYXRmb3JtQXJjaGl2ZVByb3ZpZGVyLmNsZWFuVXAoKTtcclxuXHJcbiAgcmV0dXJuIHBsYXRmb3JtUmVzcG9uc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBdmFpbGFibGVQbGF0Zm9ybXMobGltaXQpIHtcclxuICBjb25zdCBkZXZlbG9wZXIgPSBhd2FpdCBnZXREZXZlbG9wZXIoKTtcclxuICBjb25zdCBhbGxQbGF0Zm9ybXMgPSBhd2FpdCBnZXRQbGF0Zm9ybXMoKTtcclxuXHJcbiAgbGV0IG93blBsYXRmb3JtcyA9IF8uZmlsdGVyKGFsbFBsYXRmb3JtcywgcGxhdGZvcm0gPT4gXy5nZXQocGxhdGZvcm0sIFsnYXV0aG9yJywgJ25hbWUnXSkgPT09IGRldmVsb3Blci5uYW1lKTtcclxuXHJcbiAgb3duUGxhdGZvcm1zLnNvcnQoKHAxLCBwMikgPT4gc2VtdmVyLmNvbXBhcmUocDEudmVyc2lvbiwgcDIudmVyc2lvbiwgdHJ1ZSkgKiAtMSk7IC8vIGhpZ2hlc3QgdmVyc2lvbnMgZmlyc3RcclxuXHJcbiAgaWYgKF8uaXNOdW1iZXIobGltaXQpKSB7XHJcbiAgICBvd25QbGF0Zm9ybXMgPSBfLnNsaWNlKG93blBsYXRmb3JtcywgMCwgbGltaXQpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG93blBsYXRmb3JtcztcclxufVxyXG4iXX0=