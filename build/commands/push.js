'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadExtension = uploadExtension;
exports.promptPublishableVersion = promptPublishableVersion;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _extensionManager = require('../clients/extension-manager');

var extensionManager = _interopRequireWildcard(_extensionManager);

var _serverEnv = require('../clients/server-env');

var _localExtensions = require('../clients/local-extensions');

var local = _interopRequireWildcard(_localExtensions);

var _extension = require('../services/extension');

var _packer = require('../services/packer');

var _packer2 = _interopRequireDefault(_packer);

var _user_messages = require('../user_messages');

var _user_messages2 = _interopRequireDefault(_user_messages);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _progressBar = require('../services/progress-bar');

var _spinner = require('../services/spinner');

var _extlint = require('../services/extlint');

var _extlint2 = _interopRequireDefault(_extlint);

var _login = require('./login');

var _inquirer = require('inquirer');

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function uploadExtension(opts = {}, extensionDir = (0, _extension.ensureInExtensionDir)()) {
  if (!opts.nocheck) {
    process.stdout.write('Checking the extension code for syntax errors... ');
    try {
      await (0, _extlint2.default)(extensionDir);
      console.log(`[${'OK'.green.bold}]`);
    } catch (err) {
      err.message = 'Syntax errors detected, aborting push! Use `shoutem push --nocheck` to override';
      throw err;
    }
  }
  const extJson = await (0, _extension.loadExtensionJson)(extensionDir);
  if (opts.publish) {
    await promptPublishableVersion(extJson);
    await (0, _extension.saveExtensionJson)(extJson, extensionDir);
  }

  const packResult = await (0, _packer2.default)(extensionDir, { packToTempDir: true, nobuild: opts.nobuild });

  const { size } = await _fsExtra2.default.stat(packResult.package);
  const stream = _fsExtra2.default.createReadStream(packResult.package);

  const id = await local.getExtensionCanonicalName(extensionDir);

  let spinner = null;
  const extensionId = await extensionManager.uploadExtension(id, stream, (0, _progressBar.createProgressHandler)({ msg: 'Upload progress', total: size, onFinished: () => spinner = (0, _spinner.startSpinner)('Processing upload...') }), size);
  if (spinner) {
    spinner.stop(true);
    console.log(`Processing upload... [${'OK'.green.bold}]`);
  }
  console.log(_user_messages2.default.push.uploadingInfo(extJson, (0, _serverEnv.getHostEnvName)()) + ` [${'OK'.green.bold}]`);

  await _fsExtra2.default.unlink(packResult.package);

  const notPacked = _lodash2.default.difference(packResult.allDirs, packResult.packedDirs);
  if (notPacked.length > 0) {
    throw new Error(_user_messages2.default.push.missingPackageJson(notPacked));
  }

  return { extensionId, packResult, extJson };
}

async function promptPublishableVersion(extJson) {
  const dev = await (0, _login.ensureUserIsLoggedIn)();
  while (true) {
    const { name, version } = extJson;
    const canonical = (0, _extension.getExtensionCanonicalName)(dev.name, name, version);
    const canExtensionBePublished = await (0, _spinner.spinify)((0, _extensionManager.canPublish)(canonical), `Checking if version ${version} can be published`);
    if (canExtensionBePublished) {
      return;
    }
    const { newVersion } = await (0, _inquirer.prompt)({
      name: 'newVersion',
      default: _semver2.default.inc(version, 'patch'),
      message: `Version ${version} is already published. Specify another version:`,
      validate: v => !!_semver2.default.valid(v)
    });
    extJson.version = newVersion;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,