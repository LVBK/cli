'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLinkedDirectories = getLinkedDirectories;
exports.setLinkedDirectories = setLinkedDirectories;
exports.linkExtension = linkExtension;
exports.linkDirectory = linkDirectory;
exports.unlinkDirectory = unlinkDirectory;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fsExtra = require('fs-extra');

var _cache = require('./cache');

var cache = _interopRequireWildcard(_cache);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function getLinkedDirectories() {
  const allDirectories = (await cache.getValue('linked-extensions')) || [];
  const existingDirectories = await _bluebird2.default.filter(allDirectories, _fsExtra.pathExists);

  if (!_lodash2.default.isEqual(allDirectories, existingDirectories)) {
    await setLinkedDirectories(existingDirectories);
  }

  return existingDirectories;
}

async function setLinkedDirectories(dirs) {
  await cache.setValue('linked-extensions', dirs);
}

async function linkExtension(extensionDir) {
  const fullPath = _path2.default.resolve(_path2.default.join(extensionDir, 'app'));

  if (!(await (0, _fsExtra.pathExists)(_path2.default.join(fullPath, 'package.json')))) {
    throw new Error('Given path does not contain an extension');
  }

  return await linkDirectory(fullPath);
}

async function linkDirectory(dir) {
  const fullPath = _path2.default.resolve(dir);

  const dirs = await getLinkedDirectories();
  if (dirs.indexOf(fullPath) >= 0) {
    return false;
  }

  dirs.push(fullPath);
  await setLinkedDirectories(dirs);

  return true;
}

async function unlinkDirectory(dir) {
  dir = _path2.default.resolve(dir);

  const linked = await getLinkedDirectories();
  _lodash2.default.pull(linked, dir, _path2.default.join(dir, 'app'));

  await setLinkedDirectories(linked);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy9saW5rZXIuanMiXSwibmFtZXMiOlsiZ2V0TGlua2VkRGlyZWN0b3JpZXMiLCJzZXRMaW5rZWREaXJlY3RvcmllcyIsImxpbmtFeHRlbnNpb24iLCJsaW5rRGlyZWN0b3J5IiwidW5saW5rRGlyZWN0b3J5IiwiY2FjaGUiLCJhbGxEaXJlY3RvcmllcyIsImdldFZhbHVlIiwiZXhpc3RpbmdEaXJlY3RvcmllcyIsIlByb21pc2UiLCJmaWx0ZXIiLCJwYXRoRXhpc3RzIiwiXyIsImlzRXF1YWwiLCJkaXJzIiwic2V0VmFsdWUiLCJleHRlbnNpb25EaXIiLCJmdWxsUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiam9pbiIsIkVycm9yIiwiZGlyIiwiaW5kZXhPZiIsInB1c2giLCJsaW5rZWQiLCJwdWxsIl0sIm1hcHBpbmdzIjoiOzs7OztRQU1zQkEsb0IsR0FBQUEsb0I7UUFXQUMsb0IsR0FBQUEsb0I7UUFJQUMsYSxHQUFBQSxhO1FBVUFDLGEsR0FBQUEsYTtRQWNBQyxlLEdBQUFBLGU7O0FBN0N0Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7SUFBWUMsSzs7Ozs7O0FBRUwsZUFBZUwsb0JBQWYsR0FBc0M7QUFDM0MsUUFBTU0saUJBQWlCLE9BQU1ELE1BQU1FLFFBQU4sQ0FBZSxtQkFBZixDQUFOLEtBQTZDLEVBQXBFO0FBQ0EsUUFBTUMsc0JBQXNCLE1BQU1DLG1CQUFRQyxNQUFSLENBQWVKLGNBQWYsRUFBK0JLLG1CQUEvQixDQUFsQzs7QUFFQSxNQUFJLENBQUNDLGlCQUFFQyxPQUFGLENBQVVQLGNBQVYsRUFBMEJFLG1CQUExQixDQUFMLEVBQXFEO0FBQ25ELFVBQU1QLHFCQUFxQk8sbUJBQXJCLENBQU47QUFDRDs7QUFFRCxTQUFPQSxtQkFBUDtBQUNEOztBQUVNLGVBQWVQLG9CQUFmLENBQW9DYSxJQUFwQyxFQUEwQztBQUMvQyxRQUFNVCxNQUFNVSxRQUFOLENBQWUsbUJBQWYsRUFBb0NELElBQXBDLENBQU47QUFDRDs7QUFFTSxlQUFlWixhQUFmLENBQTZCYyxZQUE3QixFQUEyQztBQUNoRCxRQUFNQyxXQUFXQyxlQUFLQyxPQUFMLENBQWFELGVBQUtFLElBQUwsQ0FBVUosWUFBVixFQUF3QixLQUF4QixDQUFiLENBQWpCOztBQUVBLE1BQUksRUFBQyxNQUFNLHlCQUFXRSxlQUFLRSxJQUFMLENBQVVILFFBQVYsRUFBb0IsY0FBcEIsQ0FBWCxDQUFQLENBQUosRUFBNEQ7QUFDMUQsVUFBTSxJQUFJSSxLQUFKLENBQVUsMENBQVYsQ0FBTjtBQUNEOztBQUVELFNBQU8sTUFBTWxCLGNBQWNjLFFBQWQsQ0FBYjtBQUNEOztBQUVNLGVBQWVkLGFBQWYsQ0FBNkJtQixHQUE3QixFQUFrQztBQUN2QyxRQUFNTCxXQUFXQyxlQUFLQyxPQUFMLENBQWFHLEdBQWIsQ0FBakI7O0FBRUEsUUFBTVIsT0FBTyxNQUFNZCxzQkFBbkI7QUFDQSxNQUFJYyxLQUFLUyxPQUFMLENBQWFOLFFBQWIsS0FBMEIsQ0FBOUIsRUFBaUM7QUFDL0IsV0FBTyxLQUFQO0FBQ0Q7O0FBRURILE9BQUtVLElBQUwsQ0FBVVAsUUFBVjtBQUNBLFFBQU1oQixxQkFBcUJhLElBQXJCLENBQU47O0FBRUEsU0FBTyxJQUFQO0FBQ0Q7O0FBRU0sZUFBZVYsZUFBZixDQUErQmtCLEdBQS9CLEVBQW9DO0FBQ3pDQSxRQUFNSixlQUFLQyxPQUFMLENBQWFHLEdBQWIsQ0FBTjs7QUFFQSxRQUFNRyxTQUFTLE1BQU16QixzQkFBckI7QUFDQVksbUJBQUVjLElBQUYsQ0FBT0QsTUFBUCxFQUFlSCxHQUFmLEVBQW9CSixlQUFLRSxJQUFMLENBQVVFLEdBQVYsRUFBZSxLQUFmLENBQXBCOztBQUVBLFFBQU1yQixxQkFBcUJ3QixNQUFyQixDQUFOO0FBQ0QiLCJmaWxlIjoibGlua2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IHsgcGF0aEV4aXN0cyB9IGZyb20gJ2ZzLWV4dHJhJztcclxuaW1wb3J0ICogYXMgY2FjaGUgZnJvbSAnLi9jYWNoZSc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TGlua2VkRGlyZWN0b3JpZXMoKSB7XHJcbiAgY29uc3QgYWxsRGlyZWN0b3JpZXMgPSBhd2FpdCBjYWNoZS5nZXRWYWx1ZSgnbGlua2VkLWV4dGVuc2lvbnMnKSB8fCBbXTtcclxuICBjb25zdCBleGlzdGluZ0RpcmVjdG9yaWVzID0gYXdhaXQgUHJvbWlzZS5maWx0ZXIoYWxsRGlyZWN0b3JpZXMsIHBhdGhFeGlzdHMpO1xyXG5cclxuICBpZiAoIV8uaXNFcXVhbChhbGxEaXJlY3RvcmllcywgZXhpc3RpbmdEaXJlY3RvcmllcykpIHtcclxuICAgIGF3YWl0IHNldExpbmtlZERpcmVjdG9yaWVzKGV4aXN0aW5nRGlyZWN0b3JpZXMpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGV4aXN0aW5nRGlyZWN0b3JpZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRMaW5rZWREaXJlY3RvcmllcyhkaXJzKSB7XHJcbiAgYXdhaXQgY2FjaGUuc2V0VmFsdWUoJ2xpbmtlZC1leHRlbnNpb25zJywgZGlycyk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsaW5rRXh0ZW5zaW9uKGV4dGVuc2lvbkRpcikge1xyXG4gIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbihleHRlbnNpb25EaXIsICdhcHAnKSk7XHJcblxyXG4gIGlmICghYXdhaXQgcGF0aEV4aXN0cyhwYXRoLmpvaW4oZnVsbFBhdGgsICdwYWNrYWdlLmpzb24nKSkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignR2l2ZW4gcGF0aCBkb2VzIG5vdCBjb250YWluIGFuIGV4dGVuc2lvbicpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGF3YWl0IGxpbmtEaXJlY3RvcnkoZnVsbFBhdGgpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGlua0RpcmVjdG9yeShkaXIpIHtcclxuICBjb25zdCBmdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShkaXIpO1xyXG5cclxuICBjb25zdCBkaXJzID0gYXdhaXQgZ2V0TGlua2VkRGlyZWN0b3JpZXMoKTtcclxuICBpZiAoZGlycy5pbmRleE9mKGZ1bGxQYXRoKSA+PSAwKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBkaXJzLnB1c2goZnVsbFBhdGgpO1xyXG4gIGF3YWl0IHNldExpbmtlZERpcmVjdG9yaWVzKGRpcnMpO1xyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVubGlua0RpcmVjdG9yeShkaXIpIHtcclxuICBkaXIgPSBwYXRoLnJlc29sdmUoZGlyKTtcclxuXHJcbiAgY29uc3QgbGlua2VkID0gYXdhaXQgZ2V0TGlua2VkRGlyZWN0b3JpZXMoKTtcclxuICBfLnB1bGwobGlua2VkLCBkaXIsIHBhdGguam9pbihkaXIsICdhcHAnKSk7XHJcblxyXG4gIGF3YWl0IHNldExpbmtlZERpcmVjdG9yaWVzKGxpbmtlZCk7XHJcbn1cclxuIl19