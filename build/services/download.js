'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.downloadFileFollowRedirect = downloadFileFollowRedirect;
exports.getRedirectLocation = getRedirectLocation;
exports.pipeDownload = pipeDownload;
exports.pipeDownloadPromise = pipeDownloadPromise;
exports.pipeDownloadToFile = pipeDownloadToFile;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _getHttpErrorMessage = require('./get-http-error-message');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const downloadFile = _bluebird2.default.promisify(require('download-file'));

async function downloadFileFollowRedirect(uri, options) {
  let redirectLocation = null;

  try {
    await downloadFile(uri, options);
  } catch (err) {
    if (err.message.includes('301') || err.message.includes('302')) {
      redirectLocation = await getRedirectLocation(uri);
    } else {
      const errorMessage = (0, _getHttpErrorMessage.getHttpErrorMessage)(err.message);
      err.message = `Could not fetch platform\nRequested URL: ${uri}\n${errorMessage}`;
      throw err;
    }

    if (redirectLocation) {
      await downloadFileFollowRedirect(redirectLocation, options);
    }
  }
}

function getRedirectLocation(uri) {
  return new _bluebird2.default((resolve, reject) => {
    const protocol = _url2.default.parse(uri).protocol.slice(0, -1);
    require(protocol).get(uri, response => {
      resolve(response.headers.location);
    }).on('error', err => reject(err));
  });
}

const defaultRequestHandlers = {
  onResponse: response => {
    if (response.statusCode !== 200) {
      throw new Error(`Invalid status code; ${response.statusCode}`);
    }
  },
  onError: err => {
    throw err;
  },
  onEnd: () => {},
  destinations: []
};

function pipeDownload(url, handlers = {}, options = {}) {
  const {
    onError,
    onEnd,
    onResponse,
    destinations
  } = _extends({}, defaultRequestHandlers, handlers);

  const fileName = options.fileName || url.split('/').pop();
  const progressHandler = options.progress || (() => {});

  let req = (0, _request2.default)(url).on('error', onError).on('response', onResponse).on('data', progressHandler).on('end', () => {
    progressHandler();
    onEnd();
  });

  destinations.forEach(destination => {
    req = req.pipe(destination);
  });

  return req;
}

function pipeDownloadPromise(url, destinations, options) {
  return new _bluebird2.default((resolve, reject) => {
    const handlers = {
      onError: reject,
      onEnd: resolve,
      destinations
    };

    pipeDownload(url, handlers, options);
  });
}

function pipeDownloadToFile(url, destinationDir, options = {}) {
  const fileName = options.fileName || url.split('/').pop();
  const filePath = _path2.default.join(destinationDir, fileName);

  _fsExtra2.default.ensureFileSync(filePath);

  const fileStream = _fsExtra2.default.createWriteStream(filePath);

  pipeDownloadPromise(url, [fileStream], options);

  return new _bluebird2.default((resolve, reject) => {
    fileStream.on('error', reject);
    fileStream.on('close', resolve);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,