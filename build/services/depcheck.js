'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMissingDependencies = getMissingDependencies;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _depcheck = require('depcheck');

var _depcheck2 = _interopRequireDefault(_depcheck);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const promisedDepcheck = npmModuleRoot => new Promise((resolve, reject) => {
  (0, _depcheck2.default)(npmModuleRoot, {}, result => {
    if (_lodash2.default.some(result.invalidDirs)) {
      reject(`Directory ${_lodash2.default.keys(result.invalidDirs)[0]} is invalid`);
    }
    resolve(result);
  });
});

async function getMissingDependencies(npmModuleRoot) {
  const { missing } = await promisedDepcheck(npmModuleRoot, {});
  return _lodash2.default.keys(missing).filter(dep => _lodash2.default.includes(dep, '.'));
}

exports.default = async function (extensionRoot) {
  const appDependencies = await getMissingDependencies(_path2.default.join(extensionRoot, 'app'));
  if (appDependencies.length) {
    throw new Error(`${extensionRoot} app is missing some dependencies: ${appDependencies.join(',')}. Run with --nocheck to ignore`);
  }
  const serverDependencies = await getMissingDependencies(_path2.default.join(extensionRoot, 'server'));
  if (serverDependencies.length) {
    throw new Error(`${extensionRoot}/server is missing some dependencies: ${serverDependencies.join(',')}. Run with --nocheck to ignore`);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy9kZXBjaGVjay5qcyJdLCJuYW1lcyI6WyJnZXRNaXNzaW5nRGVwZW5kZW5jaWVzIiwicHJvbWlzZWREZXBjaGVjayIsIm5wbU1vZHVsZVJvb3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl8iLCJzb21lIiwiaW52YWxpZERpcnMiLCJrZXlzIiwibWlzc2luZyIsImZpbHRlciIsImRlcCIsImluY2x1ZGVzIiwiZXh0ZW5zaW9uUm9vdCIsImFwcERlcGVuZGVuY2llcyIsInBhdGgiLCJqb2luIiwibGVuZ3RoIiwiRXJyb3IiLCJzZXJ2ZXJEZXBlbmRlbmNpZXMiXSwibWFwcGluZ3MiOiI7Ozs7O1FBYXNCQSxzQixHQUFBQSxzQjs7QUFidEI7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQyxtQkFBbUJDLGlCQUFpQixJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3pFLDBCQUFTSCxhQUFULEVBQXdCLEVBQXhCLEVBQTRCSSxVQUFVO0FBQ3BDLFFBQUlDLGlCQUFFQyxJQUFGLENBQU9GLE9BQU9HLFdBQWQsQ0FBSixFQUFnQztBQUM5QkosYUFBUSxhQUFZRSxpQkFBRUcsSUFBRixDQUFPSixPQUFPRyxXQUFkLEVBQTJCLENBQTNCLENBQThCLGFBQWxEO0FBQ0Q7QUFDREwsWUFBUUUsTUFBUjtBQUNELEdBTEQ7QUFNRCxDQVB5QyxDQUExQzs7QUFTTyxlQUFlTixzQkFBZixDQUFzQ0UsYUFBdEMsRUFBcUQ7QUFDMUQsUUFBTSxFQUFFUyxPQUFGLEtBQWMsTUFBTVYsaUJBQWlCQyxhQUFqQixFQUFnQyxFQUFoQyxDQUExQjtBQUNBLFNBQU9LLGlCQUFFRyxJQUFGLENBQU9DLE9BQVAsRUFBZ0JDLE1BQWhCLENBQXVCQyxPQUFPTixpQkFBRU8sUUFBRixDQUFXRCxHQUFYLEVBQWdCLEdBQWhCLENBQTlCLENBQVA7QUFDRDs7a0JBRWMsZ0JBQWVFLGFBQWYsRUFBOEI7QUFDM0MsUUFBTUMsa0JBQWtCLE1BQU1oQix1QkFBdUJpQixlQUFLQyxJQUFMLENBQVVILGFBQVYsRUFBeUIsS0FBekIsQ0FBdkIsQ0FBOUI7QUFDQSxNQUFJQyxnQkFBZ0JHLE1BQXBCLEVBQTRCO0FBQzFCLFVBQU0sSUFBSUMsS0FBSixDQUFXLEdBQUVMLGFBQWMsc0NBQXFDQyxnQkFBZ0JFLElBQWhCLENBQXFCLEdBQXJCLENBQTBCLGdDQUExRixDQUFOO0FBQ0Q7QUFDRCxRQUFNRyxxQkFBcUIsTUFBTXJCLHVCQUF1QmlCLGVBQUtDLElBQUwsQ0FBVUgsYUFBVixFQUF5QixRQUF6QixDQUF2QixDQUFqQztBQUNBLE1BQUlNLG1CQUFtQkYsTUFBdkIsRUFBK0I7QUFDN0IsVUFBTSxJQUFJQyxLQUFKLENBQVcsR0FBRUwsYUFBYyx5Q0FBd0NNLG1CQUFtQkgsSUFBbkIsQ0FBd0IsR0FBeEIsQ0FBNkIsZ0NBQWhHLENBQU47QUFDRDtBQUNGLEMiLCJmaWxlIjoiZGVwY2hlY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IGRlcGNoZWNrIGZyb20gJ2RlcGNoZWNrJztcclxuXHJcbmNvbnN0IHByb21pc2VkRGVwY2hlY2sgPSBucG1Nb2R1bGVSb290ID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICBkZXBjaGVjayhucG1Nb2R1bGVSb290LCB7fSwgcmVzdWx0ID0+IHtcclxuICAgIGlmIChfLnNvbWUocmVzdWx0LmludmFsaWREaXJzKSkge1xyXG4gICAgICByZWplY3QoYERpcmVjdG9yeSAke18ua2V5cyhyZXN1bHQuaW52YWxpZERpcnMpWzBdfSBpcyBpbnZhbGlkYCk7XHJcbiAgICB9XHJcbiAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgfSlcclxufSk7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWlzc2luZ0RlcGVuZGVuY2llcyhucG1Nb2R1bGVSb290KSB7XHJcbiAgY29uc3QgeyBtaXNzaW5nIH0gPSBhd2FpdCBwcm9taXNlZERlcGNoZWNrKG5wbU1vZHVsZVJvb3QsIHt9KTtcclxuICByZXR1cm4gXy5rZXlzKG1pc3NpbmcpLmZpbHRlcihkZXAgPT4gXy5pbmNsdWRlcyhkZXAsICcuJykpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbihleHRlbnNpb25Sb290KSB7XHJcbiAgY29uc3QgYXBwRGVwZW5kZW5jaWVzID0gYXdhaXQgZ2V0TWlzc2luZ0RlcGVuZGVuY2llcyhwYXRoLmpvaW4oZXh0ZW5zaW9uUm9vdCwgJ2FwcCcpKTtcclxuICBpZiAoYXBwRGVwZW5kZW5jaWVzLmxlbmd0aCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2V4dGVuc2lvblJvb3R9IGFwcCBpcyBtaXNzaW5nIHNvbWUgZGVwZW5kZW5jaWVzOiAke2FwcERlcGVuZGVuY2llcy5qb2luKCcsJyl9LiBSdW4gd2l0aCAtLW5vY2hlY2sgdG8gaWdub3JlYCk7XHJcbiAgfVxyXG4gIGNvbnN0IHNlcnZlckRlcGVuZGVuY2llcyA9IGF3YWl0IGdldE1pc3NpbmdEZXBlbmRlbmNpZXMocGF0aC5qb2luKGV4dGVuc2lvblJvb3QsICdzZXJ2ZXInKSk7XHJcbiAgaWYgKHNlcnZlckRlcGVuZGVuY2llcy5sZW5ndGgpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgJHtleHRlbnNpb25Sb290fS9zZXJ2ZXIgaXMgbWlzc2luZyBzb21lIGRlcGVuZGVuY2llczogJHtzZXJ2ZXJEZXBlbmRlbmNpZXMuam9pbignLCcpfS4gUnVuIHdpdGggLS1ub2NoZWNrIHRvIGlnbm9yZWApO1xyXG4gIH1cclxufVxyXG4iXX0=