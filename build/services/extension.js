'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExtensionCanonicalName = getExtensionCanonicalName;
exports.dirHasExtensionJson = dirHasExtensionJson;
exports.getExtensionRootDir = getExtensionRootDir;
exports.ensureInExtensionDir = ensureInExtensionDir;
exports.loadExtensionJsonCallback = loadExtensionJsonCallback;
exports.saveExtensionJsonCallback = saveExtensionJsonCallback;
exports.extensionJsonPath = extensionJsonPath;
exports.loadExtensionJson = loadExtensionJson;
exports.saveExtensionJson = saveExtensionJson;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _analytics = require('./analytics');

var analytics = _interopRequireWildcard(_analytics);

var _data = require('./data');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getExtensionCanonicalName(devName, extName, extVersion) {
  const canonicalName = `${devName}.${extName}@${extVersion}`;

  analytics.setExtensionCanonicalName(canonicalName);

  return canonicalName;
}

function dirHasExtensionJson(dirPath) {
  try {
    _fs2.default.statSync(_path2.default.join(dirPath, 'extension.json'));
    return true;
  } catch (e) {
    if (e.code === 'ENOENT') return false;
    throw e;
  }
}

function getExtensionRootDir() {
  let d = process.cwd();
  const paths = [d];

  do {
    d = _path2.default.dirname(d);
    paths.push(d);
  } while (d !== _path2.default.dirname(d));

  for (const p of paths) {
    if (dirHasExtensionJson(p)) return p;
  }

  return null;
}

function ensureInExtensionDir() {
  const root = getExtensionRootDir();

  if (!root) {
    throw new Error('Not an extension directory. Move to extension directory and try again.');
  }

  return root;
}

function loadExtensionJsonCallback(callback) {
  const root = ensureInExtensionDir();

  (0, _data.readJsonFile)(_path2.default.join(root, 'extension.json')).then(data => callback(null, data)).catch(err => callback(err));
}

/**
 * Persist extension.json file to extension root directory
 */
function saveExtensionJsonCallback(extJson, callback) {
  const root = ensureInExtensionDir();
  _fs2.default.writeFile(_path2.default.join(root, 'extension.json'), `${JSON.stringify(extJson, null, 2)}\n`, 'utf8', err => callback(err, extJson));
}

function extensionJsonPath(rootPath) {
  return _path2.default.join(rootPath, 'extension.json');
}

async function loadExtensionJson(rootPath = ensureInExtensionDir()) {
  return await (0, _data.readJsonFile)(extensionJsonPath(rootPath));
}

async function saveExtensionJson(json, rootPath = ensureInExtensionDir()) {
  return await (0, _data.writeJsonFile)(json, extensionJsonPath(rootPath));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy9leHRlbnNpb24uanMiXSwibmFtZXMiOlsiZ2V0RXh0ZW5zaW9uQ2Fub25pY2FsTmFtZSIsImRpckhhc0V4dGVuc2lvbkpzb24iLCJnZXRFeHRlbnNpb25Sb290RGlyIiwiZW5zdXJlSW5FeHRlbnNpb25EaXIiLCJsb2FkRXh0ZW5zaW9uSnNvbkNhbGxiYWNrIiwic2F2ZUV4dGVuc2lvbkpzb25DYWxsYmFjayIsImV4dGVuc2lvbkpzb25QYXRoIiwibG9hZEV4dGVuc2lvbkpzb24iLCJzYXZlRXh0ZW5zaW9uSnNvbiIsImFuYWx5dGljcyIsImRldk5hbWUiLCJleHROYW1lIiwiZXh0VmVyc2lvbiIsImNhbm9uaWNhbE5hbWUiLCJzZXRFeHRlbnNpb25DYW5vbmljYWxOYW1lIiwiZGlyUGF0aCIsImZzIiwic3RhdFN5bmMiLCJwYXRoIiwiam9pbiIsImUiLCJjb2RlIiwiZCIsInByb2Nlc3MiLCJjd2QiLCJwYXRocyIsImRpcm5hbWUiLCJwdXNoIiwicCIsInJvb3QiLCJFcnJvciIsImNhbGxiYWNrIiwidGhlbiIsImRhdGEiLCJjYXRjaCIsImVyciIsImV4dEpzb24iLCJ3cml0ZUZpbGUiLCJKU09OIiwic3RyaW5naWZ5Iiwicm9vdFBhdGgiLCJqc29uIl0sIm1hcHBpbmdzIjoiOzs7OztRQUtnQkEseUIsR0FBQUEseUI7UUFRQUMsbUIsR0FBQUEsbUI7UUFVQUMsbUIsR0FBQUEsbUI7UUFnQkFDLG9CLEdBQUFBLG9CO1FBVUFDLHlCLEdBQUFBLHlCO1FBV0FDLHlCLEdBQUFBLHlCO1FBUUFDLGlCLEdBQUFBLGlCO1FBSU1DLGlCLEdBQUFBLGlCO1FBSUFDLGlCLEdBQUFBLGlCOztBQTVFdEI7Ozs7QUFDQTs7OztBQUNBOztJQUFZQyxTOztBQUNaOzs7Ozs7QUFFTyxTQUFTVCx5QkFBVCxDQUFtQ1UsT0FBbkMsRUFBNENDLE9BQTVDLEVBQXFEQyxVQUFyRCxFQUFpRTtBQUN0RSxRQUFNQyxnQkFBaUIsR0FBRUgsT0FBUSxJQUFHQyxPQUFRLElBQUdDLFVBQVcsRUFBMUQ7O0FBRUFILFlBQVVLLHlCQUFWLENBQW9DRCxhQUFwQzs7QUFFQSxTQUFPQSxhQUFQO0FBQ0Q7O0FBRU0sU0FBU1osbUJBQVQsQ0FBNkJjLE9BQTdCLEVBQXNDO0FBQzNDLE1BQUk7QUFDRkMsaUJBQUdDLFFBQUgsQ0FBWUMsZUFBS0MsSUFBTCxDQUFVSixPQUFWLEVBQW1CLGdCQUFuQixDQUFaO0FBQ0EsV0FBTyxJQUFQO0FBQ0QsR0FIRCxDQUdFLE9BQU9LLENBQVAsRUFBVTtBQUNWLFFBQUlBLEVBQUVDLElBQUYsS0FBVyxRQUFmLEVBQXlCLE9BQU8sS0FBUDtBQUN6QixVQUFNRCxDQUFOO0FBQ0Q7QUFDRjs7QUFFTSxTQUFTbEIsbUJBQVQsR0FBK0I7QUFDcEMsTUFBSW9CLElBQUlDLFFBQVFDLEdBQVIsRUFBUjtBQUNBLFFBQU1DLFFBQVEsQ0FBQ0gsQ0FBRCxDQUFkOztBQUVBLEtBQUc7QUFDREEsUUFBSUosZUFBS1EsT0FBTCxDQUFhSixDQUFiLENBQUo7QUFDQUcsVUFBTUUsSUFBTixDQUFXTCxDQUFYO0FBQ0QsR0FIRCxRQUdTQSxNQUFNSixlQUFLUSxPQUFMLENBQWFKLENBQWIsQ0FIZjs7QUFLQSxPQUFLLE1BQU1NLENBQVgsSUFBZ0JILEtBQWhCLEVBQXVCO0FBQ3JCLFFBQUl4QixvQkFBb0IyQixDQUFwQixDQUFKLEVBQTRCLE9BQU9BLENBQVA7QUFDN0I7O0FBRUQsU0FBTyxJQUFQO0FBQ0Q7O0FBRU0sU0FBU3pCLG9CQUFULEdBQWdDO0FBQ3JDLFFBQU0wQixPQUFPM0IscUJBQWI7O0FBRUEsTUFBSSxDQUFDMkIsSUFBTCxFQUFXO0FBQ1QsVUFBTSxJQUFJQyxLQUFKLENBQVUsd0VBQVYsQ0FBTjtBQUNEOztBQUVELFNBQU9ELElBQVA7QUFDRDs7QUFFTSxTQUFTekIseUJBQVQsQ0FBbUMyQixRQUFuQyxFQUE2QztBQUNsRCxRQUFNRixPQUFPMUIsc0JBQWI7O0FBRUEsMEJBQWFlLGVBQUtDLElBQUwsQ0FBVVUsSUFBVixFQUFnQixnQkFBaEIsQ0FBYixFQUNHRyxJQURILENBQ1FDLFFBQVFGLFNBQVMsSUFBVCxFQUFlRSxJQUFmLENBRGhCLEVBRUdDLEtBRkgsQ0FFU0MsT0FBT0osU0FBU0ksR0FBVCxDQUZoQjtBQUdEOztBQUVEOzs7QUFHTyxTQUFTOUIseUJBQVQsQ0FBbUMrQixPQUFuQyxFQUE0Q0wsUUFBNUMsRUFBc0Q7QUFDM0QsUUFBTUYsT0FBTzFCLHNCQUFiO0FBQ0FhLGVBQUdxQixTQUFILENBQWFuQixlQUFLQyxJQUFMLENBQVVVLElBQVYsRUFBZ0IsZ0JBQWhCLENBQWIsRUFDRyxHQUFFUyxLQUFLQyxTQUFMLENBQWVILE9BQWYsRUFBd0IsSUFBeEIsRUFBOEIsQ0FBOUIsQ0FBaUMsSUFEdEMsRUFFRSxNQUZGLEVBR0VELE9BQU9KLFNBQVNJLEdBQVQsRUFBY0MsT0FBZCxDQUhUO0FBSUQ7O0FBRU0sU0FBUzlCLGlCQUFULENBQTJCa0MsUUFBM0IsRUFBcUM7QUFDMUMsU0FBT3RCLGVBQUtDLElBQUwsQ0FBVXFCLFFBQVYsRUFBb0IsZ0JBQXBCLENBQVA7QUFDRDs7QUFFTSxlQUFlakMsaUJBQWYsQ0FBaUNpQyxXQUFXckMsc0JBQTVDLEVBQW9FO0FBQ3pFLFNBQU8sTUFBTSx3QkFBYUcsa0JBQWtCa0MsUUFBbEIsQ0FBYixDQUFiO0FBQ0Q7O0FBRU0sZUFBZWhDLGlCQUFmLENBQWlDaUMsSUFBakMsRUFBdUNELFdBQVdyQyxzQkFBbEQsRUFBeUU7QUFDOUUsU0FBTyxNQUFNLHlCQUFjc0MsSUFBZCxFQUFvQm5DLGtCQUFrQmtDLFFBQWxCLENBQXBCLENBQWI7QUFDRCIsImZpbGUiOiJleHRlbnNpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0ICogYXMgYW5hbHl0aWNzIGZyb20gJy4vYW5hbHl0aWNzJztcclxuaW1wb3J0IHtyZWFkSnNvbkZpbGUsIHdyaXRlSnNvbkZpbGV9IGZyb20gXCIuL2RhdGFcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRlbnNpb25DYW5vbmljYWxOYW1lKGRldk5hbWUsIGV4dE5hbWUsIGV4dFZlcnNpb24pIHtcclxuICBjb25zdCBjYW5vbmljYWxOYW1lID0gYCR7ZGV2TmFtZX0uJHtleHROYW1lfUAke2V4dFZlcnNpb259YDtcclxuXHJcbiAgYW5hbHl0aWNzLnNldEV4dGVuc2lvbkNhbm9uaWNhbE5hbWUoY2Fub25pY2FsTmFtZSk7XHJcblxyXG4gIHJldHVybiBjYW5vbmljYWxOYW1lO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlySGFzRXh0ZW5zaW9uSnNvbihkaXJQYXRoKSB7XHJcbiAgdHJ5IHtcclxuICAgIGZzLnN0YXRTeW5jKHBhdGguam9pbihkaXJQYXRoLCAnZXh0ZW5zaW9uLmpzb24nKSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBpZiAoZS5jb2RlID09PSAnRU5PRU5UJykgcmV0dXJuIGZhbHNlO1xyXG4gICAgdGhyb3cgZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRlbnNpb25Sb290RGlyKCkge1xyXG4gIGxldCBkID0gcHJvY2Vzcy5jd2QoKTtcclxuICBjb25zdCBwYXRocyA9IFtkXTtcclxuXHJcbiAgZG8ge1xyXG4gICAgZCA9IHBhdGguZGlybmFtZShkKTtcclxuICAgIHBhdGhzLnB1c2goZCk7XHJcbiAgfSB3aGlsZSAoZCAhPT0gcGF0aC5kaXJuYW1lKGQpKTtcclxuXHJcbiAgZm9yIChjb25zdCBwIG9mIHBhdGhzKSB7XHJcbiAgICBpZiAoZGlySGFzRXh0ZW5zaW9uSnNvbihwKSkgcmV0dXJuIHA7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUluRXh0ZW5zaW9uRGlyKCkge1xyXG4gIGNvbnN0IHJvb3QgPSBnZXRFeHRlbnNpb25Sb290RGlyKCk7XHJcblxyXG4gIGlmICghcm9vdCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYW4gZXh0ZW5zaW9uIGRpcmVjdG9yeS4gTW92ZSB0byBleHRlbnNpb24gZGlyZWN0b3J5IGFuZCB0cnkgYWdhaW4uJyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcm9vdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRFeHRlbnNpb25Kc29uQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICBjb25zdCByb290ID0gZW5zdXJlSW5FeHRlbnNpb25EaXIoKTtcclxuXHJcbiAgcmVhZEpzb25GaWxlKHBhdGguam9pbihyb290LCAnZXh0ZW5zaW9uLmpzb24nKSlcclxuICAgIC50aGVuKGRhdGEgPT4gY2FsbGJhY2sobnVsbCwgZGF0YSkpXHJcbiAgICAuY2F0Y2goZXJyID0+IGNhbGxiYWNrKGVycikpO1xyXG59XHJcblxyXG4vKipcclxuICogUGVyc2lzdCBleHRlbnNpb24uanNvbiBmaWxlIHRvIGV4dGVuc2lvbiByb290IGRpcmVjdG9yeVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVFeHRlbnNpb25Kc29uQ2FsbGJhY2soZXh0SnNvbiwgY2FsbGJhY2spIHtcclxuICBjb25zdCByb290ID0gZW5zdXJlSW5FeHRlbnNpb25EaXIoKTtcclxuICBmcy53cml0ZUZpbGUocGF0aC5qb2luKHJvb3QsICdleHRlbnNpb24uanNvbicpLFxyXG4gICAgYCR7SlNPTi5zdHJpbmdpZnkoZXh0SnNvbiwgbnVsbCwgMil9XFxuYCxcclxuICAgICd1dGY4JyxcclxuICAgIGVyciA9PiBjYWxsYmFjayhlcnIsIGV4dEpzb24pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuc2lvbkpzb25QYXRoKHJvb3RQYXRoKSB7XHJcbiAgcmV0dXJuIHBhdGguam9pbihyb290UGF0aCwgJ2V4dGVuc2lvbi5qc29uJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkRXh0ZW5zaW9uSnNvbihyb290UGF0aCA9IGVuc3VyZUluRXh0ZW5zaW9uRGlyKCkpIHtcclxuICByZXR1cm4gYXdhaXQgcmVhZEpzb25GaWxlKGV4dGVuc2lvbkpzb25QYXRoKHJvb3RQYXRoKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlRXh0ZW5zaW9uSnNvbihqc29uLCByb290UGF0aCA9IGVuc3VyZUluRXh0ZW5zaW9uRGlyKCkpe1xyXG4gIHJldHVybiBhd2FpdCB3cml0ZUpzb25GaWxlKGpzb24sIGV4dGVuc2lvbkpzb25QYXRoKHJvb3RQYXRoKSk7XHJcbn1cclxuIl19