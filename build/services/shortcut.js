'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addShortcut = addShortcut;
exports.askShortcutCreationQuestions = askShortcutCreationQuestions;
exports.addShortcutForScreen = addShortcutForScreen;
exports.linkSettingsPageWithExistingScreen = linkSettingsPageWithExistingScreen;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _decamelize = require('decamelize');

var _decamelize2 = _interopRequireDefault(_decamelize);

var _inquirer = require('inquirer');

var _lodashGetOrSet = require('lodash-get-or-set');

var _lodashGetOrSet2 = _interopRequireDefault(_lodashGetOrSet);

var _cliParsing = require('./cli-parsing');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addShortcut(extJson, { name, title, description, screenName, pagesNames }) {
  const shortcut = { name, title, description };
  if (screenName) {
    shortcut.screen = `@.${screenName}`;
  }
  if (_lodash2.default.size(pagesNames)) {
    shortcut.adminPages = pagesNames.map(name => ({
      page: `@.${name}`,
      title: (0, _decamelize2.default)(name, ' ')
    }));
  }

  (0, _lodashGetOrSet2.default)(extJson, 'shortcuts', []).push(shortcut);
}

function validateShortcutName(name, existingShortcuts) {
  if (!(0, _cliParsing.isVariableName)(name)) {
    return 'Shortcut\'s name must be a valid js variable name';
  }
  if (_lodash2.default.find(existingShortcuts, { name })) {
    return `${name} already exists`;
  }
  return true;
}

function createShortcutCreationQuestions({ shortcuts, parentName, screens, defaultName = 'MyShortcut' }) {
  const when = ({ shouldCreateShortcut }) => shouldCreateShortcut || !parentName;
  const shortcutsWithoutScreen = _lodash2.default.filter(screens, ({ name }) => !_lodash2.default.find(shortcuts, { screen: `@.${name}` }));
  const screensNames = _lodash2.default.map(shortcutsWithoutScreen, 'name');

  return [{
    type: 'confirm',
    name: 'shouldCreateShortcut',
    message: 'Create a shortcut (so that screen can be added through the Builder)?',
    when: () => parentName
  }, {
    type: 'input',
    name: 'name',
    message: 'Shortcut name:',
    default: () => parentName || defaultName,
    validate: name => validateShortcutName(name, shortcuts),
    when
  }, {
    type: 'input',
    name: 'title',
    message: 'Shortcut title:',
    validate: x => !!x,
    default: ({ name }) => _lodash2.default.upperFirst((0, _decamelize2.default)(name, ' ')),
    when
  }, {
    type: 'input',
    name: 'description',
    message: 'Shortcut description:',
    default: () => parentName ? `A shortcut for ${parentName}` : null,
    when
  }, {
    type: 'list',
    name: 'screenName',
    message: 'Which screen would you like to connect with this shortcut?',
    when: () => !parentName && screensNames.length,
    choices: [{ name: 'skip', value: null }, ...screensNames]
  }];
}

async function askShortcutCreationQuestions(opts) {
  return await (0, _inquirer.prompt)(createShortcutCreationQuestions(opts));
}

function addShortcutForScreen(extJson, screen, shortcut) {
  (0, _lodashGetOrSet2.default)(extJson, 'shortcuts', []).push({
    name: shortcut.name,
    title: shortcut.title,
    description: shortcut.description,
    screen: `@.${screen.name}`
  });
}

function linkSettingsPageWithExistingScreen(extJson, page, screenName) {
  let shortcut = _lodash2.default.find(extJson.shortcuts, { screen: `@.${screenName}` });
  if (!shortcut) {
    throw new Error(`Shortcut for screen ${screenName} does not exist so it cannot be linked with settings pages. ` + `Please create a shortcut using 'shoutem shortcut add' first!`);
  }

  (0, _lodashGetOrSet2.default)(shortcut, 'adminPages', []).push({
    page: `@.${page.name}`,
    title: page.title || (0, _decamelize2.default)(page.name, ' ')
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,