'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = load;
exports.instantiateTemplatePath = instantiateTemplatePath;

var _lodashGetOrSet = require('lodash-get-or-set');

var _lodashGetOrSet2 = _interopRequireDefault(_lodashGetOrSet);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const templatesDirectory = _path2.default.join(__dirname, '..', 'templates');

function load(pathWithSlashes, templateContext) {
  const p = _path2.default.join(templatesDirectory, ...pathWithSlashes.split('/'));
  const template = _fsExtra2.default.readFileSync(p, 'utf8');
  return _mustache2.default.render(template, templateContext);
}

async function instantiateTemplatePathRec(localTemplatePath, destinationPath, context, opts) {
  if (localTemplatePath.endsWith('template-init.js')) {
    return null;
  }
  destinationPath = _mustache2.default.render(destinationPath, context);

  const templatePath = _path2.default.join(templatesDirectory, localTemplatePath);
  const templatePathState = await _fsExtra2.default.lstat(templatePath);
  (0, _lodashGetOrSet2.default)(context, 'diffLog', {});

  if (templatePathState.isDirectory()) {
    const files = await _fsExtra2.default.readdir(templatePath);
    await _bluebird2.default.map(files, file => {
      const src = _path2.default.join(localTemplatePath, file);
      const dest = _path2.default.join(destinationPath, file);
      return instantiateTemplatePathRec(src, dest, context, opts);
    });
  } else if (templatePathState.isFile()) {
    const templateContent = await _fsExtra2.default.readFile(templatePath, 'utf8');
    context.diffLog[destinationPath] = await _mustache2.default.render(templateContent, context);
  }
}

function importName(modulePath, name, defaultValue) {
  try {
    return require(modulePath)[name] || defaultValue;
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      return defaultValue;
    }
    throw err;
  }
}

async function instantiateTemplatePath(localTemplatePath, destinationPath, context, opts = {}) {
  opts.overwrite = opts.overwrite || (() => false);
  const postRunActions = (0, _lodashGetOrSet2.default)(context, 'postRunActions', []);

  const initPath = _path2.default.join(templatesDirectory, localTemplatePath, 'template-init');

  const before = importName(initPath, 'before', () => {});
  const after = importName(initPath, 'after', () => {});

  await before(context);
  await instantiateTemplatePathRec(localTemplatePath, destinationPath, context, opts);
  await after(context);

  return {
    diffLog: context.diffLog || {},
    postRunActions
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2aWNlcy90ZW1wbGF0ZS5qcyJdLCJuYW1lcyI6WyJsb2FkIiwiaW5zdGFudGlhdGVUZW1wbGF0ZVBhdGgiLCJ0ZW1wbGF0ZXNEaXJlY3RvcnkiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInBhdGhXaXRoU2xhc2hlcyIsInRlbXBsYXRlQ29udGV4dCIsInAiLCJzcGxpdCIsInRlbXBsYXRlIiwiZnMiLCJyZWFkRmlsZVN5bmMiLCJNdXN0YWNoZSIsInJlbmRlciIsImluc3RhbnRpYXRlVGVtcGxhdGVQYXRoUmVjIiwibG9jYWxUZW1wbGF0ZVBhdGgiLCJkZXN0aW5hdGlvblBhdGgiLCJjb250ZXh0Iiwib3B0cyIsImVuZHNXaXRoIiwidGVtcGxhdGVQYXRoIiwidGVtcGxhdGVQYXRoU3RhdGUiLCJsc3RhdCIsImlzRGlyZWN0b3J5IiwiZmlsZXMiLCJyZWFkZGlyIiwiUHJvbWlzZSIsIm1hcCIsImZpbGUiLCJzcmMiLCJkZXN0IiwiaXNGaWxlIiwidGVtcGxhdGVDb250ZW50IiwicmVhZEZpbGUiLCJkaWZmTG9nIiwiaW1wb3J0TmFtZSIsIm1vZHVsZVBhdGgiLCJuYW1lIiwiZGVmYXVsdFZhbHVlIiwicmVxdWlyZSIsImVyciIsImNvZGUiLCJvdmVyd3JpdGUiLCJwb3N0UnVuQWN0aW9ucyIsImluaXRQYXRoIiwiYmVmb3JlIiwiYWZ0ZXIiXSwibWFwcGluZ3MiOiI7Ozs7O1FBU2dCQSxJLEdBQUFBLEk7UUF3Q01DLHVCLEdBQUFBLHVCOztBQWpEdEI7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBR0EsTUFBTUMscUJBQXFCQyxlQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsSUFBckIsRUFBMkIsV0FBM0IsQ0FBM0I7O0FBRU8sU0FBU0wsSUFBVCxDQUFjTSxlQUFkLEVBQStCQyxlQUEvQixFQUFnRDtBQUNyRCxRQUFNQyxJQUFJTCxlQUFLQyxJQUFMLENBQVVGLGtCQUFWLEVBQThCLEdBQUdJLGdCQUFnQkcsS0FBaEIsQ0FBc0IsR0FBdEIsQ0FBakMsQ0FBVjtBQUNBLFFBQU1DLFdBQVdDLGtCQUFHQyxZQUFILENBQWdCSixDQUFoQixFQUFtQixNQUFuQixDQUFqQjtBQUNBLFNBQU9LLG1CQUFTQyxNQUFULENBQWdCSixRQUFoQixFQUEwQkgsZUFBMUIsQ0FBUDtBQUNEOztBQUVELGVBQWVRLDBCQUFmLENBQTBDQyxpQkFBMUMsRUFBNkRDLGVBQTdELEVBQThFQyxPQUE5RSxFQUF1RkMsSUFBdkYsRUFBNkY7QUFDM0YsTUFBSUgsa0JBQWtCSSxRQUFsQixDQUEyQixrQkFBM0IsQ0FBSixFQUFvRDtBQUNsRCxXQUFPLElBQVA7QUFDRDtBQUNESCxvQkFBa0JKLG1CQUFTQyxNQUFULENBQWdCRyxlQUFoQixFQUFpQ0MsT0FBakMsQ0FBbEI7O0FBRUEsUUFBTUcsZUFBZWxCLGVBQUtDLElBQUwsQ0FBVUYsa0JBQVYsRUFBOEJjLGlCQUE5QixDQUFyQjtBQUNBLFFBQU1NLG9CQUFvQixNQUFNWCxrQkFBR1ksS0FBSCxDQUFTRixZQUFULENBQWhDO0FBQ0EsZ0NBQVNILE9BQVQsRUFBa0IsU0FBbEIsRUFBNkIsRUFBN0I7O0FBRUEsTUFBSUksa0JBQWtCRSxXQUFsQixFQUFKLEVBQXFDO0FBQ25DLFVBQU1DLFFBQVEsTUFBTWQsa0JBQUdlLE9BQUgsQ0FBV0wsWUFBWCxDQUFwQjtBQUNBLFVBQU1NLG1CQUFRQyxHQUFSLENBQVlILEtBQVosRUFBbUJJLFFBQVE7QUFDL0IsWUFBTUMsTUFBTTNCLGVBQUtDLElBQUwsQ0FBVVksaUJBQVYsRUFBNkJhLElBQTdCLENBQVo7QUFDQSxZQUFNRSxPQUFPNUIsZUFBS0MsSUFBTCxDQUFVYSxlQUFWLEVBQTJCWSxJQUEzQixDQUFiO0FBQ0EsYUFBT2QsMkJBQTJCZSxHQUEzQixFQUFnQ0MsSUFBaEMsRUFBc0NiLE9BQXRDLEVBQStDQyxJQUEvQyxDQUFQO0FBQ0QsS0FKSyxDQUFOO0FBS0QsR0FQRCxNQU9PLElBQUlHLGtCQUFrQlUsTUFBbEIsRUFBSixFQUFnQztBQUNyQyxVQUFNQyxrQkFBa0IsTUFBTXRCLGtCQUFHdUIsUUFBSCxDQUFZYixZQUFaLEVBQTBCLE1BQTFCLENBQTlCO0FBQ0FILFlBQVFpQixPQUFSLENBQWdCbEIsZUFBaEIsSUFBbUMsTUFBTUosbUJBQVNDLE1BQVQsQ0FBZ0JtQixlQUFoQixFQUFpQ2YsT0FBakMsQ0FBekM7QUFDRDtBQUNGOztBQUVELFNBQVNrQixVQUFULENBQW9CQyxVQUFwQixFQUFnQ0MsSUFBaEMsRUFBc0NDLFlBQXRDLEVBQW9EO0FBQ2xELE1BQUk7QUFDRixXQUFPQyxRQUFRSCxVQUFSLEVBQW9CQyxJQUFwQixLQUE2QkMsWUFBcEM7QUFDRCxHQUZELENBRUUsT0FBT0UsR0FBUCxFQUFZO0FBQ1osUUFBSUEsSUFBSUMsSUFBSixLQUFhLGtCQUFqQixFQUFxQztBQUNuQyxhQUFPSCxZQUFQO0FBQ0Q7QUFDRCxVQUFNRSxHQUFOO0FBQ0Q7QUFDRjs7QUFFTSxlQUFleEMsdUJBQWYsQ0FBdUNlLGlCQUF2QyxFQUEwREMsZUFBMUQsRUFBMkVDLE9BQTNFLEVBQW9GQyxPQUFPLEVBQTNGLEVBQStGO0FBQ3BHQSxPQUFLd0IsU0FBTCxHQUFpQnhCLEtBQUt3QixTQUFMLEtBQW1CLE1BQU0sS0FBekIsQ0FBakI7QUFDQSxRQUFNQyxpQkFBaUIsOEJBQVMxQixPQUFULEVBQWtCLGdCQUFsQixFQUFvQyxFQUFwQyxDQUF2Qjs7QUFFQSxRQUFNMkIsV0FBVzFDLGVBQUtDLElBQUwsQ0FBVUYsa0JBQVYsRUFBOEJjLGlCQUE5QixFQUFpRCxlQUFqRCxDQUFqQjs7QUFFQSxRQUFNOEIsU0FBU1YsV0FBV1MsUUFBWCxFQUFxQixRQUFyQixFQUErQixNQUFNLENBQUUsQ0FBdkMsQ0FBZjtBQUNBLFFBQU1FLFFBQVFYLFdBQVdTLFFBQVgsRUFBcUIsT0FBckIsRUFBOEIsTUFBTSxDQUFFLENBQXRDLENBQWQ7O0FBRUEsUUFBTUMsT0FBTzVCLE9BQVAsQ0FBTjtBQUNBLFFBQU1ILDJCQUEyQkMsaUJBQTNCLEVBQThDQyxlQUE5QyxFQUErREMsT0FBL0QsRUFBd0VDLElBQXhFLENBQU47QUFDQSxRQUFNNEIsTUFBTTdCLE9BQU4sQ0FBTjs7QUFFQSxTQUFPO0FBQ0xpQixhQUFTakIsUUFBUWlCLE9BQVIsSUFBbUIsRUFEdkI7QUFFTFM7QUFGSyxHQUFQO0FBSUQiLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0T3JTZXQgZnJvbSAnbG9kYXNoLWdldC1vci1zZXQnO1xyXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XHJcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgTXVzdGFjaGUgZnJvbSAnbXVzdGFjaGUnO1xyXG5pbXBvcnQgeyBwYXRoRXhpc3RzIH0gZnJvbSAnZnMtZXh0cmEnO1xyXG5cclxuY29uc3QgdGVtcGxhdGVzRGlyZWN0b3J5ID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3RlbXBsYXRlcycpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWQocGF0aFdpdGhTbGFzaGVzLCB0ZW1wbGF0ZUNvbnRleHQpIHtcclxuICBjb25zdCBwID0gcGF0aC5qb2luKHRlbXBsYXRlc0RpcmVjdG9yeSwgLi4ucGF0aFdpdGhTbGFzaGVzLnNwbGl0KCcvJykpO1xyXG4gIGNvbnN0IHRlbXBsYXRlID0gZnMucmVhZEZpbGVTeW5jKHAsICd1dGY4Jyk7XHJcbiAgcmV0dXJuIE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZSwgdGVtcGxhdGVDb250ZXh0KTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaW5zdGFudGlhdGVUZW1wbGF0ZVBhdGhSZWMobG9jYWxUZW1wbGF0ZVBhdGgsIGRlc3RpbmF0aW9uUGF0aCwgY29udGV4dCwgb3B0cykge1xyXG4gIGlmIChsb2NhbFRlbXBsYXRlUGF0aC5lbmRzV2l0aCgndGVtcGxhdGUtaW5pdC5qcycpKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgZGVzdGluYXRpb25QYXRoID0gTXVzdGFjaGUucmVuZGVyKGRlc3RpbmF0aW9uUGF0aCwgY29udGV4dCk7XHJcblxyXG4gIGNvbnN0IHRlbXBsYXRlUGF0aCA9IHBhdGguam9pbih0ZW1wbGF0ZXNEaXJlY3RvcnksIGxvY2FsVGVtcGxhdGVQYXRoKTtcclxuICBjb25zdCB0ZW1wbGF0ZVBhdGhTdGF0ZSA9IGF3YWl0IGZzLmxzdGF0KHRlbXBsYXRlUGF0aCk7XHJcbiAgZ2V0T3JTZXQoY29udGV4dCwgJ2RpZmZMb2cnLCB7fSk7XHJcblxyXG4gIGlmICh0ZW1wbGF0ZVBhdGhTdGF0ZS5pc0RpcmVjdG9yeSgpKSB7XHJcbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IGZzLnJlYWRkaXIodGVtcGxhdGVQYXRoKTtcclxuICAgIGF3YWl0IFByb21pc2UubWFwKGZpbGVzLCBmaWxlID0+IHtcclxuICAgICAgY29uc3Qgc3JjID0gcGF0aC5qb2luKGxvY2FsVGVtcGxhdGVQYXRoLCBmaWxlKTtcclxuICAgICAgY29uc3QgZGVzdCA9IHBhdGguam9pbihkZXN0aW5hdGlvblBhdGgsIGZpbGUpO1xyXG4gICAgICByZXR1cm4gaW5zdGFudGlhdGVUZW1wbGF0ZVBhdGhSZWMoc3JjLCBkZXN0LCBjb250ZXh0LCBvcHRzKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSBpZiAodGVtcGxhdGVQYXRoU3RhdGUuaXNGaWxlKCkpIHtcclxuICAgIGNvbnN0IHRlbXBsYXRlQ29udGVudCA9IGF3YWl0IGZzLnJlYWRGaWxlKHRlbXBsYXRlUGF0aCwgJ3V0ZjgnKTtcclxuICAgIGNvbnRleHQuZGlmZkxvZ1tkZXN0aW5hdGlvblBhdGhdID0gYXdhaXQgTXVzdGFjaGUucmVuZGVyKHRlbXBsYXRlQ29udGVudCwgY29udGV4dCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbXBvcnROYW1lKG1vZHVsZVBhdGgsIG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gcmVxdWlyZShtb2R1bGVQYXRoKVtuYW1lXSB8fCBkZWZhdWx0VmFsdWU7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBpZiAoZXJyLmNvZGUgPT09ICdNT0RVTEVfTk9UX0ZPVU5EJykge1xyXG4gICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgZXJyO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluc3RhbnRpYXRlVGVtcGxhdGVQYXRoKGxvY2FsVGVtcGxhdGVQYXRoLCBkZXN0aW5hdGlvblBhdGgsIGNvbnRleHQsIG9wdHMgPSB7fSkge1xyXG4gIG9wdHMub3ZlcndyaXRlID0gb3B0cy5vdmVyd3JpdGUgfHwgKCgpID0+IGZhbHNlKTtcclxuICBjb25zdCBwb3N0UnVuQWN0aW9ucyA9IGdldE9yU2V0KGNvbnRleHQsICdwb3N0UnVuQWN0aW9ucycsIFtdKTtcclxuXHJcbiAgY29uc3QgaW5pdFBhdGggPSBwYXRoLmpvaW4odGVtcGxhdGVzRGlyZWN0b3J5LCBsb2NhbFRlbXBsYXRlUGF0aCwgJ3RlbXBsYXRlLWluaXQnKTtcclxuXHJcbiAgY29uc3QgYmVmb3JlID0gaW1wb3J0TmFtZShpbml0UGF0aCwgJ2JlZm9yZScsICgpID0+IHt9KTtcclxuICBjb25zdCBhZnRlciA9IGltcG9ydE5hbWUoaW5pdFBhdGgsICdhZnRlcicsICgpID0+IHt9KTtcclxuXHJcbiAgYXdhaXQgYmVmb3JlKGNvbnRleHQpO1xyXG4gIGF3YWl0IGluc3RhbnRpYXRlVGVtcGxhdGVQYXRoUmVjKGxvY2FsVGVtcGxhdGVQYXRoLCBkZXN0aW5hdGlvblBhdGgsIGNvbnRleHQsIG9wdHMpO1xyXG4gIGF3YWl0IGFmdGVyKGNvbnRleHQpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZGlmZkxvZzogY29udGV4dC5kaWZmTG9nIHx8IHt9LFxyXG4gICAgcG9zdFJ1bkFjdGlvbnMsXHJcbiAgfTtcclxufVxyXG4iXX0=