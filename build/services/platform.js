'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getPlatformRootDir = getPlatformRootDir;
exports.getPlatformExtensionsDir = getPlatformExtensionsDir;
exports.createPlatformConfig = createPlatformConfig;
exports.getPlatformConfig = getPlatformConfig;
exports.setPlatformConfig = setPlatformConfig;
exports.configurePlatform = configurePlatform;
exports.fixPlatform = fixPlatform;
exports.downloadApp = downloadApp;
exports.addToExtensionsJs = addToExtensionsJs;
exports.linkLocalExtension = linkLocalExtension;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _replaceInFile = require('replace-in-file');

var _replaceInFile2 = _interopRequireDefault(_replaceInFile);

var _appManager = require('../clients/app-manager');

var appManager = _interopRequireWildcard(_appManager);

var _authService = require('../clients/auth-service');

var authService = _interopRequireWildcard(_authService);

var _decompress = require('./decompress');

var _decompress2 = _interopRequireDefault(_decompress);

var _services = require('../../config/services');

var _services2 = _interopRequireDefault(_services);

var _data = require('./data');

var _npm = require('./npm');

var npm = _interopRequireWildcard(_npm);

var _yarn = require('./yarn');

var _reactNative = require('./react-native');

var reactNative = _interopRequireWildcard(_reactNative);

var _analytics = require('./analytics');

var analytics = _interopRequireWildcard(_analytics);

var _fsExtra = require('fs-extra');

var _commandExists = require('./command-exists');

var _commandExists2 = _interopRequireDefault(_commandExists);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function isPlatformDirectory(dir) {
  const { name } = (await (0, _data.readJsonFile)(_path2.default.join(dir, 'package.json'))) || {};

  // platform package was renamed with Platform release v1.1.10
  return name === '@shoutem/mobile-app' || name === '@shoutem/platform';
}

async function getPlatformRootDir(dir = process.cwd(), { shouldThrow = true } = {}) {
  if (await isPlatformDirectory(dir)) {
    return dir;
  }

  const parentDir = _path2.default.join(dir, '..');

  if (parentDir === dir) {
    if (shouldThrow) {
      throw new Error('Not a platform directory');
    } else {
      return null;
    }
  }
  return await getPlatformRootDir(parentDir, { shouldThrow });
}

async function getPlatformExtensionsDir(dir = null) {
  return _path2.default.join(dir || (await getPlatformRootDir()), 'extensions');
}

async function createPlatformConfig(platformDir, opts) {
  const configTemplate = await (0, _fsExtra.readJson)(_path2.default.join(platformDir, 'config.template.json'));

  let authorization;
  try {
    authorization = await authService.createAppAccessToken(opts.appId, (await authService.getRefreshToken()));
  } catch (err) {
    if (err.code === 401 || err.code === 403) {
      err.message = 'Not authorized to create application token. You must log in again using `shoutem login` command.';
    }
    throw err;
  }

  return _extends({}, configTemplate, opts, {
    serverApiEndpoint: _url2.default.parse(_services2.default.appManager).hostname,
    legacyApiEndpoint: _url2.default.parse(_services2.default.legacyService).hostname,
    authorization,
    configurationFilePath: 'config.json'
  });
}

async function getPlatformConfig(platformDir = null) {
  return await (0, _fsExtra.readJson)(_path2.default.join(platformDir || (await getPlatformRootDir()), 'config.json'));
}

async function setPlatformConfig(platformDir, mobileConfig) {
  await (0, _data.writeJsonFile)(mobileConfig, _path2.default.join(platformDir, 'config.json'));
}

async function configurePlatform(platformDir) {
  await (0, _yarn.ensureYarnInstalled)();
  await reactNative.ensureInstalled();
  if (process.platform === 'darwin' && !(await (0, _commandExists2.default)('pod'))) {
    throw new Error('Missing `pods` command. Please install cocoapods and run `shoutem configure` in the ' + `${platformDir} directory`);
  }

  if (!(await getPlatformConfig(platformDir))) {
    throw new Error('Missing config.json file');
  }

  await npm.install(_path2.default.join(platformDir, 'scripts'));
  await npm.run(platformDir, 'configure');
}

async function fixPlatform(platformDir, appId) {
  const appBuilderPath = _path2.default.join(platformDir, 'scripts', 'classes', 'app-builder.js');

  if (process.platform === 'win32') {
    try {
      await (0, _replaceInFile2.default)({
        files: appBuilderPath,
        from: './gradlew',
        to: 'gradlew'
      });
    } catch (err) {
      console.log('WARN: Could not rename ./gradle to gradle');
    }

    try {
      await (0, _replaceInFile2.default)({
        files: appBuilderPath,
        from: "const apkPath = path.join('android', 'app', 'build', 'outputs', 'apk');",
        to: `const apkPath = path.join('c:/', '${appId}', 'tmp', 'ShoutemApp', 'app', 'outputs', 'apk');`
      });
    } catch (err) {
      console.log('WARN: Could not adapt client for c:\\tmp build directory');
    }

    try {
      await (0, _replaceInFile2.default)({
        files: _path2.default.join(platformDir, 'android', 'build.gradle'),
        from: '//<CLI> buildDir = "C:/tmp/',
        to: `buildDir = "C:/tmp/${appId}/`
      });
    } catch (err) {
      console.log('WARN: Could not set the tmp build directory for android app');
    }
  }
}

async function downloadApp(appId, destinationDir, options = {}) {
  analytics.setAppId(appId);

  const versionCheck = options.versionCheck || (() => {});

  const { mobileAppVersion } = await appManager.getApplicationPlatform(appId);
  await versionCheck(mobileAppVersion);

  await pullPlatform(mobileAppVersion, destinationDir, options);

  if (!(await (0, _fsExtra.pathExists)(destinationDir))) {
    throw new Error('Platform code could not be downloaded from github. Make sure that platform is setup correctly.');
  }
}

async function pullPlatform(version, destination, options) {
  const url = `${_services2.default.mobileAppUrl}/archive/v${version}.tar.gz`;
  await (0, _decompress2.default)(url, destination, _extends({}, options, { strip: 1, useCache: options.useCache }));
}

async function addToExtensionsJs(platformDir, extensionPath) {
  const { name } = await npm.getPackageJson(_path2.default.join(extensionPath, 'app'));

  const extensionsJsPath = _path2.default.join(platformDir, 'extensions.js');

  let extensionsJsData = await (0, _fsExtra.readFile)(extensionsJsPath, 'utf8');

  if (_lodash2.default.includes(extensionsJsData, `'${name}'`)) {
    return;
  }

  extensionsJsData = extensionsJsData.replace('};', `'${name}': require('${name}'),`);
  extensionsJsData += '  };\n';

  await (0, _fsExtra.writeFile)(extensionsJsPath, extensionsJsData);
}

async function linkLocalExtension(platformDir, extensionPath) {
  await npm.addLocalDependency(platformDir, _path2.default.join(extensionPath, 'app'));
  await npm.linkLocalDependencies(platformDir);
  await npm.install(platformDir);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,