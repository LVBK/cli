'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.npmUnpack = npmUnpack;
exports.shoutemUnpack = shoutemUnpack;

var _childProcessPromise = require('child-process-promise');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _tmpPromise = require('tmp-promise');

var _tmpPromise2 = _interopRequireDefault(_tmpPromise);

var _tar = require('tar.gz');

var _tar2 = _interopRequireDefault(_tar);

var _node = require('./node');

var _data = require('./data');

var _spinner = require('./spinner');

var _globMove = require('glob-move');

var _globMove2 = _interopRequireDefault(_globMove);

var _decompress = require('decompress');

var _decompress2 = _interopRequireDefault(_decompress);

var _extension = require('./extension');

var _npm = require('./npm');

var _login = require('../commands/login');

var _confirmer = require('./confirmer');

var _confirmer2 = _interopRequireDefault(_confirmer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mv = _bluebird2.default.promisify(require('mv'));

function hasPackageJson(dir) {
  return (0, _fsExtra.pathExists)(_path2.default.join(dir, 'package.json'));
}

async function npmPack(dir, destinationDir) {
  const resultFilename = _path2.default.join(destinationDir, `${_path2.default.basename(dir)}.tgz`);
  const packageJsonPath = _path2.default.join(dir, 'package.json');

  const originalFileContent = await _fsExtra2.default.readFile(packageJsonPath);
  const packageJson = await (0, _data.readJsonFile)(packageJsonPath);

  const timestamp = new Date().getTime();
  packageJson.version = `${packageJson.version}-build${timestamp}`;

  await (0, _data.writeJsonFile)(packageJson, packageJsonPath);
  const { stdout } = await (0, _childProcessPromise.exec)('npm pack', { cwd: dir });
  const packageFilename = stdout.replace(/\n$/, '');
  const packagePath = _path2.default.join(dir, packageFilename);

  await mv(packagePath, resultFilename);

  if (originalFileContent !== null) {
    await _fsExtra2.default.writeFile(packageJsonPath, originalFileContent, 'utf8');
  }
}

async function npmUnpack(tgzFile, destinationDir) {
  if (!(await (0, _fsExtra.pathExists)(tgzFile))) {
    return [];
  }

  const tmpDir = (await _tmpPromise2.default.dir()).path;
  await (0, _decompress2.default)(tgzFile, tmpDir);
  return await (0, _globMove2.default)(_path2.default.join(tmpDir, 'package', '*'), destinationDir, { dot: true });
}

async function shoutemUnpack(tgzFile, destinationDir) {
  const tmpDir = (await _tmpPromise2.default.dir()).path;
  await npmUnpack(tgzFile, tmpDir);

  await npmUnpack(_path2.default.join(tmpDir, 'app.tgz'), _path2.default.join(destinationDir, 'app'));
  await npmUnpack(_path2.default.join(tmpDir, 'server.tgz'), _path2.default.join(destinationDir, 'server'));
  if (await (0, _fsExtra.pathExists)(_path2.default.join(tmpDir, 'cloud.tgz'))) {
    await npmUnpack(_path2.default.join(tmpDir, 'cloud.tgz'), _path2.default.join(destinationDir, 'cloud'));
  }
  await (0, _globMove2.default)(_path2.default.join(tmpDir, 'extension.json'), destinationDir);
}

function hasExtensionsJson(dir) {
  return (0, _fsExtra.pathExists)(_path2.default.join(dir, 'extension.json'));
}

function hasCloudComponent(dir) {
  return hasPackageJson(_path2.default.join(dir, 'cloud'));
}

async function offerDevNameSync(extensionDir) {
  const { name: extensionName } = await (0, _extension.loadExtensionJson)(extensionDir);

  const syncCloudComponent = await hasCloudComponent(extensionDir);

  const appPackageJson = await (0, _npm.getPackageJson)(_path2.default.join(extensionDir, 'app'));
  const serverPackageJson = await (0, _npm.getPackageJson)(_path2.default.join(extensionDir, 'server'));
  const cloudPackageJson = syncCloudComponent && (await (0, _npm.getPackageJson)(_path2.default.join(extensionDir, 'cloud')));

  const { name: appModuleName } = appPackageJson;
  const { name: serverModuleName } = serverPackageJson;
  const { name: cloudModuleName } = cloudPackageJson || {};
  const { name: developerName } = await (0, _login.ensureUserIsLoggedIn)(true);

  const targetModuleName = `${developerName}.${extensionName}`;
  if (targetModuleName === appModuleName && targetModuleName === serverModuleName && (!syncCloudComponent || targetModuleName === cloudModuleName)) {
    return;
  }

  if (!(await (0, _confirmer2.default)(`You're uploading an extension that isn't yours, do you want to rename it in the package.json files?`))) {
    return;
  }

  appPackageJson.name = targetModuleName;
  await (0, _npm.savePackageJson)(_path2.default.join(extensionDir, 'app'), appPackageJson);

  serverPackageJson.name = targetModuleName;
  await (0, _npm.savePackageJson)(_path2.default.join(extensionDir, 'server'), serverPackageJson);

  if (syncCloudComponent) {
    cloudPackageJson.name = targetModuleName;
    await (0, _npm.savePackageJson)(_path2.default.join(extensionDir, 'cloud'), cloudPackageJson);
  }
}

exports.default = async function shoutemPack(dir, options) {
  const packedDirectories = ['app', 'server', 'cloud'].map(d => _path2.default.join(dir, d));

  if (!(await hasExtensionsJson(dir))) {
    throw new Error(`${dir} cannot be packed because it has no extension.json file.`);
  }

  await await offerDevNameSync(dir);

  const tmpDir = (await _tmpPromise2.default.dir()).path;
  const packageDir = _path2.default.join(tmpDir, 'package');
  await _fsExtra2.default.mkdir(packageDir);

  const dirsToPack = await _bluebird2.default.filter(packedDirectories, hasPackageJson);

  if (options.nobuild) {
    console.error('Skipping build step due to --nobuild flag.');
  } else {
    await (0, _spinner.spinify)((0, _node.buildNodeProject)(_path2.default.join(dir, 'server')), 'Building the server part...', 'OK');
    await (0, _spinner.spinify)((0, _node.buildNodeProject)(_path2.default.join(dir, 'app')), 'Building the app part...', 'OK');
  }

  return await (0, _spinner.spinify)(async () => {
    for (const dir of dirsToPack) {
      await npmPack(dir, packageDir);
    }
    const extensionJsonPathSrc = _path2.default.join(dir, 'extension.json');
    const extensionJsonPathDest = _path2.default.join(packageDir, 'extension.json');
    await (0, _fsExtra.copy)(extensionJsonPathSrc, extensionJsonPathDest);

    const destinationDirectory = _path2.default.join(options.packToTempDir ? tmpDir : dir, 'extension.tgz');
    await (0, _tar2.default)().compress(packageDir, destinationDirectory);

    return {
      packedDirs: dirsToPack,
      allDirs: packedDirectories,
      package: destinationDirectory
    };
  }, 'Packing extension...', 'OK');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,