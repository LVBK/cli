'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packItUp = packItUp;
exports.createPlatformArchiveProvider = createPlatformArchiveProvider;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ignore = require('ignore');

var _ignore2 = _interopRequireDefault(_ignore);

var _tmpPromise = require('tmp-promise');

var _tmpPromise2 = _interopRequireDefault(_tmpPromise);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _archiver = require('archiver');

var _archiver2 = _interopRequireDefault(_archiver);

var _decompress = require('decompress');

var _decompress2 = _interopRequireDefault(_decompress);

var _confirmer = require('./confirmer');

var _confirmer2 = _interopRequireDefault(_confirmer);

var _platform = require('./platform');

var _validation = require('./validation');

var _download = require('./download');

var _file = require('./file');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SHOUTEM_IGNORE_FILE_NAME = '.shoutemignore';
const ARCHIVE_FORMAT = 'zip';

const DEFAULT_SHOUTEM_IGNORE = `
# we don't neet it
.git
# node modules will get installed during the build process of the app
node_modules
# Shoutem platform should not come with any extensions or config file
extensions
config
config.json

# the following are build folders which will be recreated while building the app
ios/Pods

`;

class ArchiveProvider {
  constructor() {
    this.archiveData = {
      path: null,
      temporaryDir: null,
      initialized: false
    };
  }

  isInitialized() {
    return this.archiveData.initialized;
  }
}

class RemoteArchiveProvider extends ArchiveProvider {
  constructor(url) {
    super();
    this.url = url;
  }

  getType() {
    return 'remote';
  }

  async getArchivePath() {
    const data = await this.getArchiveData();
    return data.path;
  }

  async getPlatformJsonPath() {
    const data = await this.getArchiveData();

    const extractDirectory = _path2.default.join(data.temporaryDir.path, 'extracted');
    await (0, _decompress2.default)(data.path, extractDirectory);

    const zipContent = _fsExtra2.default.readdirSync(extractDirectory);
    if (_lodash2.default.size(zipContent) !== 1 || !_lodash2.default.first(zipContent) || !_fsExtra2.default.lstatSync(_path2.default.join(extractDirectory, _lodash2.default.first(zipContent))).isDirectory()) {
      throw new Error('Platform archive must contain a single directory');
    }

    const platformJsonPath = _path2.default.join(extractDirectory, _lodash2.default.first(zipContent), 'platform', 'platform.json');
    if (!_fsExtra2.default.pathExists(platformJsonPath)) {
      throw new Error('Platform archive is missing platform/platform.json');
    }

    return platformJsonPath;
  }

  async getPlatformJson() {
    const platformJsonPath = await this.getPlatformJsonPath();
    const platformJsonFile = _fsExtra2.default.readFileSync(platformJsonPath);
    const jsonContent = JSON.parse(platformJsonFile);

    return jsonContent;
  }

  async getArchiveData() {
    if (!this.isInitialized()) {
      const temporaryDir = await _tmpPromise2.default.dir();

      const destinationDir = temporaryDir.path;
      const platformFileName = `platform.${ARCHIVE_FORMAT}`;

      await (0, _download.downloadFileFollowRedirect)(this.url, { directory: destinationDir, filename: platformFileName });

      this.archiveData = {
        path: _path2.default.join(destinationDir, platformFileName),
        temporaryDir,
        initialized: true
      };
    }

    return this.archiveData;
  }

  cleanUp() {
    if (this.isInitialized()) {
      this.archiveData = {
        path: null,
        temporaryDir: null,
        initialized: false
      };
    }
  }
}

class LocalArchiveProvider extends ArchiveProvider {
  constructor(path) {
    super();
    this.path = path;
  }

  getType() {
    return 'local';
  }

  async getArchivePath() {
    const data = await this.getArchiveData();
    return data.path;
  }

  async getPlatformJsonPath() {
    const platformJsonFile = _fsExtra2.default.readFileSync(_path2.default.join(this.path, 'platform', 'platform.json'));
    return platformJsonFile;
  }

  async getPlatformJson() {
    const platformJsonFile = await this.getPlatformJsonPath();
    const jsonContent = JSON.parse(platformJsonFile);

    return jsonContent;
  }

  async getArchiveData() {
    if (!this.isInitialized()) {
      const temporaryDir = await _tmpPromise2.default.dir();

      const destinationDir = temporaryDir.path;
      const platformFileName = `platform.${ARCHIVE_FORMAT}`;

      const ignores = await this.loadIgnoreList();

      const platformJson = await this.getPlatformJson();
      const rootDirectoryName = `platform-${platformJson.version}`;

      await packItUp(this.path, destinationDir, platformFileName, ignores, rootDirectoryName);

      this.archiveData = {
        path: _path2.default.join(destinationDir, platformFileName),
        temporaryDir,
        initialized: true
      };
    }

    return this.archiveData;
  }

  cleanUp() {
    if (this.isInitialized()) {
      this.archiveData = {
        path: null,
        temporaryDir: null,
        initialized: false
      };
    }
  }

  async validateShoutemIgnore() {
    const ignoreFilePath = _path2.default.join(this.path, SHOUTEM_IGNORE_FILE_NAME);

    const ignoreExists = await _fsExtra2.default.pathExists(ignoreFilePath);
    if (!ignoreExists) {
      console.log('WARNING: missing or empty .shoutemignore file!');
      if (await (0, _confirmer2.default)('Do you want to create a default .shoutemignore file?')) {
        await _fsExtra2.default.writeFile(ignoreFilePath, DEFAULT_SHOUTEM_IGNORE);
      } else {
        console.log('WARNING: Packing everything up, please make sure your folder does not contain any unneeded files');
      }
    }
  }

  async loadIgnoreList() {
    const ignoreFilePath = _path2.default.join(this.path, SHOUTEM_IGNORE_FILE_NAME);
    const shoutemIgnores = (0, _file.readLinesInFile)(ignoreFilePath);

    // no need to remove comments, 'ignores' does that for us
    return (0, _ignore2.default)().add(shoutemIgnores);
  }
}

function packItUp(sourcePath, destinationDir, platformFileName, ignores, rootDirectoryName) {
  return new _bluebird2.default((resolve, reject) => {
    const archive = (0, _archiver2.default)(ARCHIVE_FORMAT);

    archive.on('error', err => {
      reject(err);
    });

    const output = _fsExtra2.default.createWriteStream(_path2.default.join(destinationDir, platformFileName));
    archive.pipe(output);

    output.on('close', () => {
      resolve();
    });

    const files = (0, _file.listDirectoryContent)(sourcePath, true);

    // create a root directory in archive
    archive.append(null, { name: `${rootDirectoryName}/` });

    files.forEach(file => {
      const ignoreTest = ignores.test(file);
      if (!ignoreTest.ignored) {
        archive.append(_fsExtra2.default.createReadStream(file), { name: `${rootDirectoryName}/${file}` });
      }
    });

    archive.finalize();
  });
}

async function createPlatformArchiveProvider(url) {
  if (!_lodash2.default.isEmpty(url) && (0, _validation.isValidPlatformUrl)(url)) {
    return new RemoteArchiveProvider(url);
  }

  const platformDir = await (0, _platform.getPlatformRootDir)(process.cwd(), { shouldThrow: false });
  if (platformDir != null) {
    return new LocalArchiveProvider(platformDir);
  }

  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,